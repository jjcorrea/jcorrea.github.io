<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Joel CorrÃªa</title>
 <link href="http://jjcorrea.github.io/atom.xml" rel="self"/>
 <link href="http://jjcorrea.github.io/"/>
 <updated>2015-01-02T18:30:01-02:00</updated>
 <id>http://jjcorrea.github.io</id>
 <author>
   <name>Joel Correa</name>
   <email></email>
 </author>

 
 <entry>
   <title>Contents of requirement specification</title>
   <link href="http://jjcorrea.github.io/2015/01/02/the-contents-of-requirement-specification/"/>
   <updated>2015-01-02T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2015/01/02/the-contents-of-requirement-specification</id>
   <content type="html">&lt;p&gt;There is not a single right way to &lt;strong&gt;organize requirements specification&lt;/strong&gt;, but certain topics recur in most systems and deserve their own sections. The following model is a suggested &lt;strong&gt;structure&lt;/strong&gt; for requirements specification.&lt;/p&gt;

&lt;h2&gt;Introduction section&lt;/h2&gt;

&lt;h3&gt;System purpose&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What the system &lt;strong&gt;is for&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who wants it&lt;/strong&gt;, and &lt;strong&gt;why&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who will use&lt;/strong&gt; it&lt;/li&gt;
&lt;li&gt;what is the &lt;strong&gt;business motivation&lt;/strong&gt; behind it?&lt;/li&gt;
&lt;li&gt;Describe the &lt;strong&gt;system itself&lt;/strong&gt;, not the project which implements it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Document purpose&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;role the document plays&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Brief and concise explanation&lt;/li&gt;
&lt;li&gt;Identify the &lt;strong&gt;audience&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;State disclaimers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Requirement format&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Requirement ID&lt;/strong&gt;: Unique identifier. Should be concise, distinctive and sequential&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Description, in a free-text format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Priority&lt;/strong&gt;: How important the requirement is&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; description: Sums up the requirement as briefly as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Glossary&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Relevant items&lt;/li&gt;
&lt;li&gt;Term + Definition&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documents&lt;/strong&gt; and &lt;strong&gt;sources&lt;/strong&gt; used&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Document history&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Details of &lt;strong&gt;each version&lt;/strong&gt; of the document&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Context section&lt;/h2&gt;

&lt;h3&gt;Scope&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How the system fits on real world&lt;/strong&gt; around it&lt;/li&gt;
&lt;li&gt;A local map showing where our territory ends, and that of the neighbors starts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context diagram&lt;/strong&gt; is a good starting point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Main kinds of information are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: All &lt;strong&gt;distinct pieces&lt;/strong&gt; that must be in-place and &lt;strong&gt;how they connect to each other&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User roles&lt;/strong&gt;: Main &lt;strong&gt;roles&lt;/strong&gt; in which people interact with the system. System &lt;strong&gt;actors&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scope boundary&lt;/strong&gt;: What is the system &lt;strong&gt;responsability&lt;/strong&gt; and what isn&amp;#39;t&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intersystem interfaces&lt;/strong&gt;: All interfaces via each component &lt;strong&gt;interacts with other systems&lt;/strong&gt; and logical components&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Major assumptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Each thing which is &lt;strong&gt;assumed to be true&lt;/strong&gt; and that would have a &lt;strong&gt;significant impact&lt;/strong&gt; on the system if it were not so&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Major exclusions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Something the system &lt;strong&gt;does not&lt;/strong&gt; do&lt;/li&gt;
&lt;li&gt;Any feature &lt;strong&gt;not planned to be supported&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Key business entities&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Major system entities around which the system performs a set of activities&lt;/li&gt;
&lt;li&gt;State transition diagram to express it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Infrastructures&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The underlying set of &lt;strong&gt;capabilities needed&lt;/strong&gt; to support one or more requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Functional area sections&lt;/h2&gt;

&lt;h3&gt;Functional areas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Top-level section for each logical grouping of functions&lt;/li&gt;
&lt;li&gt;Order sections according to their importance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Major non-functional capabilities section&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Describe important non-functional aspects of a system&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Agile production</title>
   <link href="http://jjcorrea.github.io/2015/01/02/agile-production/"/>
   <updated>2015-01-02T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2015/01/02/agile-production</id>
   <content type="html">&lt;h2&gt;Stakeholders engagement&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Stakeholders = Team members, engineers, architects, testers...&lt;/li&gt;
&lt;li&gt;What the system is = Architecture / Platform. Stable structures of the business over time. &lt;strong&gt;Key stakeholders are&lt;/strong&gt;: Domain experts, system architects, business people.&lt;/li&gt;
&lt;li&gt;What the system does = End user&amp;#39;s view of the services provided by the system. &lt;strong&gt;Key stakeholders are&lt;/strong&gt;: End user, UX, interface designers, requirements folks.&lt;/li&gt;
&lt;li&gt;Remember lean: &amp;quot;everybody, all together, from early on&amp;quot;&lt;/li&gt;
&lt;li&gt;Customer engagement is one of the strongest agile principles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Problem definition&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;The difference between the current state and the desired state&amp;quot;&lt;/li&gt;
&lt;li&gt;Short description - if everyone knows what the problem is, everyone knows when it is done&lt;/li&gt;
&lt;li&gt;Revisit the problem definition once in a while&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What the system is - System form&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;Every system has two designs (reflects two kinds of intents): The design of its functionalities - what it &lt;em&gt;does&lt;/em&gt; and the design of its form - what it &lt;em&gt;is&lt;/em&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;The form provides a firm *&lt;em&gt;foundation&lt;/em&gt; for change*&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;structure&lt;/strong&gt; of a system follows its form&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;end-user mental model&lt;/strong&gt; is one sound foundation for architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We do architecture:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To &lt;strong&gt;capture stakeholders perspectives&lt;/strong&gt; that affect design&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;embrace change&lt;/strong&gt; and &lt;strong&gt;reduce the cost of solving problems&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;To create a &lt;strong&gt;shared vision&lt;/strong&gt; across the team &amp;amp; stakeholders&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;smooth the decision making&lt;/strong&gt; process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&amp;quot;Good form up front reduces cost in long term&amp;quot;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;What the system does - System functionality&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Captures end-user mental model as &lt;strong&gt;roles&lt;/strong&gt; or &lt;strong&gt;actors&lt;/strong&gt;, and by the interaction between these roles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use cases&lt;/strong&gt; capture role and its interactions as well. Good tool for elicit, explore, refine and capture end-user mental models and also for organizing requirements (functional grouping, mutual dependency and priority ordering).&lt;/li&gt;
&lt;li&gt;A sound architecture provides a context in which users scenarios can unfold.&lt;/li&gt;
&lt;li&gt;The scenarios have two parts: The pure business logic and the domain logic that supports the scenario&lt;/li&gt;
&lt;li&gt;Testers pay close heed to what the system &lt;strong&gt;is supposed to&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Design and Code&lt;/h2&gt;

&lt;p&gt;The main activities at this point are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Turn use case scenarios into algorithms.&lt;/li&gt;
&lt;li&gt;Write system tests&lt;/li&gt;
&lt;li&gt;Tailor the domain class interfaces to the new algorithms&lt;/li&gt;
&lt;li&gt;Code up the algorithms in the role code and the support logic in the domain code (+refactoring along the way)&lt;/li&gt;
&lt;li&gt;Run the newly written system tests against the new code&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Webservices API styles</title>
   <link href="http://jjcorrea.github.io/2014/12/28/webservices-api-styles/"/>
   <updated>2014-12-28T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/28/webservices-api-styles</id>
   <content type="html">&lt;ul&gt;
&lt;li&gt;Distinct APIs&lt;/li&gt;
&lt;li&gt;Attend multiple client types&lt;/li&gt;
&lt;li&gt;API reflecting client needs (top-down)&lt;/li&gt;
&lt;li&gt;External vs Internal API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Design considerations&lt;/h2&gt;

&lt;h3&gt;Encapsulation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Services should &lt;strong&gt;hide implementation details&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Prevents &lt;strong&gt;coupling&lt;/strong&gt; the clients&lt;/li&gt;
&lt;li&gt;Service design should avoid exposing its internals&lt;/li&gt;
&lt;li&gt;&amp;quot;Bottom-up&amp;quot; design if making domain entities accessible to external clients&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indirection&lt;/strong&gt; enables internals evolve or even to be replaced&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Service contract&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Agreement&lt;/strong&gt; on how clients and services may interact&lt;/li&gt;
&lt;li&gt;Pre / Post &lt;strong&gt;conditions&lt;/strong&gt; indicating the client &lt;strong&gt;expectations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Autonomy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependencies&lt;/strong&gt; on outside forces&lt;/li&gt;
&lt;li&gt;External entities, services, etc&lt;/li&gt;
&lt;li&gt;Distributed transactions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Latency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serialization / Deserialization&lt;/strong&gt; cost&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Payload size&lt;/li&gt;
&lt;li&gt;Few &lt;strong&gt;&amp;quot;chunky&amp;quot; messages&lt;/strong&gt; are normally better than &amp;quot;chatty conversation&amp;quot; (several smaller messages)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Partial failures&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Failure scenarios handling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Clients need to be prepared to service failures and vice-versa&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Binary message encoding of text-based data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Information exchanged is generally text-based&lt;/li&gt;
&lt;li&gt;Text information may be &lt;strong&gt;encoded as binary&lt;/strong&gt; data before being serialized&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;RPC API&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;How can clients execute remote procedures over HTTP?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Not easy (low-level communication protocols)&lt;/li&gt;
&lt;li&gt;Different platforms use different &lt;strong&gt;encodings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Remoting technologies (CORBA, DCOM) made it easier to share and use remote procedures&lt;/li&gt;
&lt;li&gt;Request: Procedure(i.e. service) name + arguments&lt;/li&gt;
&lt;li&gt;Response: Procedure results&lt;/li&gt;
&lt;li&gt;Service frameworks: JAX-WS &amp;amp; WCF for abstracting structural formats (JSON / XML), encoding, generating XSD, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Considerations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flat APIs&lt;/strong&gt; inclination: Tendency to create service signatures just as class method signatures&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking changes&lt;/strong&gt;: Argument order - Add, remove and reorder breaks the client&lt;/li&gt;
&lt;li&gt;Single-Message argument pattern to resolve the issue (+ flexibility)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proxies&lt;/strong&gt; and &lt;strong&gt;service descriptors&lt;/strong&gt;: Clients applications typically use proxies to connect to services on this style. Typically reads service descriptors (e.g. WSDL)&lt;/li&gt;
&lt;li&gt;Location transparency&lt;/li&gt;
&lt;li&gt;Async: RPC APIs often use &lt;strong&gt;request-acknowlege&lt;/strong&gt; instead of &lt;strong&gt;request-response&lt;/strong&gt; interaction pattern. &lt;/li&gt;
&lt;li&gt;Avoid blocking: Clients can use an &lt;strong&gt;async response handler&lt;/strong&gt; pattern to avoid being blocked during the service processment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Messaging API&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;How can clients send commands, notifications or other information to remote systems over HTTP while avoiding direct coupling to remote procedures&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Signature changes may be breaking&lt;/li&gt;
&lt;li&gt;Determines the procedure based on message content&lt;/li&gt;
&lt;li&gt;Style is normally used when external entities &lt;strong&gt;drive the requirements&lt;/strong&gt; definition&lt;/li&gt;
&lt;li&gt;Messages are typycally defined using XML Schema language, however messages can be defined through other means (e.g. Google protocol buffers / ProtoBuff).&lt;/li&gt;
&lt;li&gt;API provides &lt;strong&gt;endpoints&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Messages are generically of three types: &lt;em&gt;Command messages&lt;/em&gt; (triggers a specific task on the receiver) &lt;em&gt;Event messages&lt;/em&gt; (notify) or &lt;em&gt;Document messages&lt;/em&gt; (like business documents).&lt;/li&gt;
&lt;li&gt;WSDL as &lt;strong&gt;service descriptor&lt;/strong&gt; and for &lt;strong&gt;specifications&lt;/strong&gt; (WS-Policy, WS-Security, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Considerations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Service descriptors and connectors&lt;/strong&gt;: Message APIs often employ a &lt;strong&gt;service descriptor&lt;/strong&gt; 
(most common is WSDL) to aid in client-side &lt;strong&gt;connectors&lt;/strong&gt;. Operations are grouped into an abstract type (an &lt;em&gt;interface&lt;/em&gt; on WSDL 2.0)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delegation of work&lt;/strong&gt;: The logic used to process specific message types is often triggered by a &lt;strong&gt;command invoker&lt;/strong&gt; - when the logic is sufficiently complicated. An alternative is to use a &lt;strong&gt;workflow connector&lt;/strong&gt; - when triggering a complex, long-running job.&lt;/li&gt;
&lt;li&gt;Async: Message APIs often use &lt;strong&gt;request-acknowlege&lt;/strong&gt; instead of &lt;strong&gt;request-response&lt;/strong&gt; interaction pattern. &lt;/li&gt;
&lt;li&gt;Avoid blocking: Clients can use an &lt;strong&gt;async response handler&lt;/strong&gt; pattern to avoid being blocked during the service processment&lt;/li&gt;
&lt;li&gt;Late binding: Often provide addresses to related services clients may use&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Resource API&lt;/h2&gt;

&lt;p&gt;A client application that consumes or manipulates text, images, documents or other media files managed by a remote system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How can a client manipulate data managed by remote system, avoid direct coupling to remote procedures, and minimize the need for domain-specific API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Provides access to resources (media file, collection of related data, database information, a logical transaction, etc)&lt;/li&gt;
&lt;li&gt;Often adhere to REST&lt;/li&gt;
&lt;li&gt;Since each URI refers to a single resource / collection, services can often be added, changed or removed with &lt;strong&gt;minimal impact&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Contracts are composed of: protocol, media types produced or consumed by the service, status codes, and URI schemes to identify the resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Considerations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use with &lt;strong&gt;disparate clients&lt;/strong&gt;: Good choice when having a wide mix of clients&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Addressability&lt;/strong&gt;: Make it easy to save and share links to services&lt;/li&gt;
&lt;li&gt;Code generation of service connectors: Client developers can&amp;#39;t take advantage of code generation tools (no service descriptors).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;: Resource APIs often use &lt;strong&gt;request-response&lt;/strong&gt;, but can use &lt;strong&gt;request-acknowlege&lt;/strong&gt; interaction pattern as well. &lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;blocking&lt;/strong&gt;: Clients can use an &lt;strong&gt;async response handler&lt;/strong&gt; pattern to avoid being blocked during the service processment&lt;/li&gt;
&lt;li&gt;Support to client &lt;strong&gt;preferences&lt;/strong&gt;: Supports multiple representation of the same resource. Rather than a different URI, you can use &lt;strong&gt;media type negotiation&lt;/strong&gt; to enable clients to indicate their preferences.&lt;/li&gt;
&lt;li&gt;Late binding: Often provide addresses to related services clients may use&lt;/li&gt;
&lt;li&gt;Ability to leverage commodity &lt;strong&gt;caching&lt;/strong&gt; technologies&lt;/li&gt;
&lt;li&gt;Resources API and REST: Not every Resource API adhere to REST, but they often do.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Architectural analysis</title>
   <link href="http://jjcorrea.github.io/2014/12/26/architectural-analysis/"/>
   <updated>2014-12-26T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/26/architectural-analysis</id>
   <content type="html">&lt;p&gt;There are many different approaches for analyzing software systems, generally consisted of the following activities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development of &lt;strong&gt;architectural models&lt;/strong&gt;: The data is collected during the requirements gathering to be analyzed and incorporated to the architectural model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhancement and synthesis&lt;/strong&gt; of a solution: Enhances the information described on the initial architectural model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution&lt;/strong&gt; analysis: Analysis of the solution performed in terms of architectural model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice the architectural model as an initial &lt;strong&gt;draft&lt;/strong&gt; of the (under development) system architecture. The architectural models are defined from a set of &lt;em&gt;architectural requirements&lt;/em&gt; on an iterative process.&lt;/p&gt;

&lt;h2&gt;Software architecture properties&lt;/h2&gt;

&lt;p&gt;Apart from the &lt;a href=&quot;http://jjcorrea.github.io/2014/11/30/architectural-requirements/&quot;&gt;architectural requirements&lt;/a&gt; which has been showed on a previous post, an architecture also presents some properties which can be seen as intrinsic to it, which are: &lt;strong&gt;Efficiency&lt;/strong&gt;, &lt;strong&gt;integrity&lt;/strong&gt; and &lt;strong&gt;flexibility&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Efficiency&lt;/h3&gt;

&lt;p&gt;The amount of computational resources required by a system to perform its activities indicates its efficiency. The resources can be seen in terms of &lt;strong&gt;storage&lt;/strong&gt; and &lt;strong&gt;processment&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One of the main requirements related to efficiency is &lt;strong&gt;performance&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;Integrity&lt;/h3&gt;

&lt;p&gt;The architectural integrity is measured in terms of the project &lt;strong&gt;unification in different levels&lt;/strong&gt;. The software architecture describes the system organization in a high level, and targets the objects unification, in other words it serves as a reference to the project.&lt;/p&gt;

&lt;h3&gt;Flexibility&lt;/h3&gt;

&lt;p&gt;The efford required to &lt;strong&gt;change&lt;/strong&gt; a software system.&lt;/p&gt;

&lt;h2&gt;SAAM - Software architecture analysis method&lt;/h2&gt;

&lt;p&gt;Initially designed for supporting software architects to &lt;strong&gt;compare architectural solutions&lt;/strong&gt; (Kazman, 1994). Initial targets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a set of &lt;strong&gt;usage scenarios&lt;/strong&gt; which are important on the &lt;em&gt;domain&lt;/em&gt;, to the system main stakeholders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain functional partitioning&lt;/strong&gt;, followed by linking the existing functions in a partition to usage scenarios.&lt;/li&gt;
&lt;li&gt;Use the functional partition and the scenarios to &lt;strong&gt;analyze the proposed architectures&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the &lt;strong&gt;candidate architectures&lt;/strong&gt; receive an &lt;strong&gt;score&lt;/strong&gt; per usage scenario, and in the end, a global score.&lt;/p&gt;

&lt;p&gt;SAAM consists on the following 5 interdependent steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Scenario&lt;/strong&gt; development: Develop scenarios of tasks that illustrate the sorts of activities which the system must support. Those will cover the &lt;em&gt;non-functional requirements&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Architectural description: Describe the &lt;strong&gt;components&lt;/strong&gt; and &lt;strong&gt;connections&lt;/strong&gt; used on the architecture specification.&lt;/li&gt;
&lt;li&gt;Scenario evaluation: Determine whether the candidate architecture directly supports the tasks associated to the scenario, or if any change is necessary.&lt;/li&gt;
&lt;li&gt;Scenario interaction: Indicates the tasks that the components are associated to. &lt;strong&gt;SOC&lt;/strong&gt;. &lt;strong&gt;Isolation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Scenario and interaction &lt;strong&gt;evaluation&lt;/strong&gt;: The most subjective step on the analysis, the outcome is a global score composed of each scenario and interaction supported by each architecture.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;ATAM - Architecture tradeoff analysis method&lt;/h2&gt;

&lt;p&gt;Indicates the &lt;strong&gt;consequences of architectural decisions&lt;/strong&gt; related to the quality requirements of a system (Kazman, 1999). Evaluates the &lt;strong&gt;architectural solution&lt;/strong&gt;, identifying potential &lt;strong&gt;risks&lt;/strong&gt; associated to it.&lt;/p&gt;

&lt;p&gt;The fundamental aspects under which the method was developed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quality attributes characterization&lt;/li&gt;
&lt;li&gt;Scenario analysis to obtain a consensus between system stakeholders.&lt;/li&gt;
&lt;li&gt;Architectural decision analysis, based on &lt;a href=&quot;http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=13505&quot;&gt;ABAS&lt;/a&gt; (attribute-based architectural style) which illustrate how architectural decisions can affect quality attributes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ATAM method comprehends nine steps which are distributed on four phases as follows:&lt;/p&gt;

&lt;h3&gt;1st step: Presentation&lt;/h3&gt;

&lt;h4&gt;1. ATAM method presentation&lt;/h4&gt;

&lt;p&gt;Describe the method to the sistem&amp;#39;s stakeholders. The set of stakeholders includes: software architects, users / clients, managers, testing &amp;amp; QA team.&lt;/p&gt;

&lt;h4&gt;2. Company targets presentation&lt;/h4&gt;

&lt;p&gt;The project manager describes which are the business targets which are triggering the development efford, and consequently which are the main architectural requirements (as security level, availability, etc).&lt;/p&gt;

&lt;h4&gt;3. Architecture presentation&lt;/h4&gt;

&lt;p&gt;The architect presents the proposed architecture, focusing on how the business targets will be fulfilled.&lt;/p&gt;

&lt;h3&gt;2nd step: Investigation and analysis&lt;/h3&gt;

&lt;h4&gt;4. Architectural approaches identification&lt;/h4&gt;

&lt;p&gt;The architects identifies the possible architectural approaches, but doesn&amp;#39;t analyze them.&lt;/p&gt;

&lt;h4&gt;5. Quality attributes utility tree generation&lt;/h4&gt;

&lt;p&gt;The quality attributes are clarified, and specified using scenarios, including priorities where they exist.&lt;/p&gt;

&lt;h4&gt;6. Architectural approach analysis (1)&lt;/h4&gt;

&lt;p&gt;The architectural approaches which satisfies the quality attributes mapped on step 5 are analyzed.&lt;/p&gt;

&lt;h3&gt;3rd step: Test&lt;/h3&gt;

&lt;h4&gt;7. Analysis, discussion and scenario priorization&lt;/h4&gt;

&lt;p&gt;All the stakeholders participate of a voting process giving priorities to the set of scenarios specified on step 5.&lt;/p&gt;

&lt;h4&gt;8. Architectural approach analysis (2)&lt;/h4&gt;

&lt;p&gt;The architectural approach analysis performed on step 6 is now repeated, but specifically for scenarios which derivates from step 7.&lt;/p&gt;

&lt;h3&gt;4th step: Report&lt;/h3&gt;

&lt;h4&gt;9. Results presentation&lt;/h4&gt;

&lt;p&gt;The ATAM work team presents the results obtained based on the information collected though the method. This information includes scenarios, architectural styles, utility tree, quality attributes, risks. A report is elaborated detailing the results and presenting the strategy to be taken.&lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are &lt;strong&gt;architectural properties&lt;/strong&gt; instrinsic to the system structure&lt;/li&gt;
&lt;li&gt;These properties, plus the architectural requirements (non-functional and project attributes) are used as the base of the &lt;strong&gt;architectural analysis&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SAAM (Software architecture analysis method)&lt;/strong&gt;: method to compare architectural solutions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATAM (Architecture tradeoff analysis method)&lt;/strong&gt;: evaluates the risks and consequences of architectural decisions.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Wildfly 8</title>
   <link href="http://jjcorrea.github.io/2014/12/20/wildfly-8/"/>
   <updated>2014-12-20T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/20/wildfly-8</id>
   <content type="html">&lt;p&gt;This is a basic introduction to the Wildfly 8 features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High Performance Web Server (Undertow.io)&lt;/li&gt;
&lt;li&gt;Port Reduction&lt;/li&gt;
&lt;li&gt;Management Role Based Access Control (RBAC) &amp;amp; Auditing&lt;/li&gt;
&lt;li&gt;Security Manager&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Clustering&lt;/li&gt;
&lt;li&gt;JDK8 Compatibility&lt;/li&gt;
&lt;li&gt;Highlights&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Undertow&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://undertow.io/&quot;&gt;Undertow.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New core &lt;strong&gt;web server&lt;/strong&gt; &amp;amp; &lt;strong&gt;servlet container&lt;/strong&gt; - Can be used without any servlets as well&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-blocking&lt;/strong&gt; and &lt;strong&gt;blocking&lt;/strong&gt; handlers&lt;/li&gt;
&lt;li&gt;Traditional and asynchronous servlets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: core jar coming in at under 1Mb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Socket&lt;/strong&gt; Support&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;Servlet 3.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embeddable&lt;/strong&gt;: Can be embedded in an application or run standalone easily&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://undertow.io/documentation/index.html&quot;&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Port reduction&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All the protocols multiplexed over two HTTP ports: Management port and an Application port&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Management Role Based Access Control (RBAC) &amp;amp; Auditing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Different sets of permissions control&lt;/li&gt;
&lt;li&gt;Audit changes&lt;/li&gt;
&lt;li&gt;Manage users&lt;/li&gt;
&lt;li&gt;LDAP integration to support groups and roles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Security Manager&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Per-deployment security permissions&lt;/li&gt;
&lt;li&gt;Performance improvement&lt;/li&gt;
&lt;li&gt;In addition to the standard Java EE &lt;code&gt;permissions.xml&lt;/code&gt;, a more flexible &lt;code&gt;jboss-permissions.xml&lt;/code&gt; descriptor is also supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Logging&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The management API supports list and view log files on a server.&lt;/li&gt;
&lt;li&gt;Possible to define custom formatters, apart from the default pattern formatter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add-logging-api-dependencies&lt;/code&gt; attribute to enable / disable implicit server logging.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use-deployment-logging-config&lt;/code&gt; attribute enable / disable logging configuration files found on deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Clustering&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Support hugely refactored on Wildfly 8&lt;/li&gt;
&lt;li&gt;Optimized &lt;strong&gt;distributed web session&lt;/strong&gt; for use with undertow&lt;/li&gt;
&lt;li&gt;Optimized &lt;strong&gt;single sign-on (SSO)&lt;/strong&gt; support for undertow&lt;/li&gt;
&lt;li&gt;Optimized stateful @EJB caching implementation&lt;/li&gt;
&lt;li&gt;Public &lt;strong&gt;clustering API&lt;/strong&gt;: Applications can &lt;em&gt;view cluster topology&lt;/em&gt;, listen for its &lt;em&gt;changes&lt;/em&gt;, broadcast/submit commands to a cluster (&lt;strong&gt;remote execution&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Core distribution&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Wildfly 8 architecture distribution. Ideal for framework authors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;JDK8 compatibility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Full support to JDK8.&lt;/li&gt;
&lt;li&gt;Migration to the JDK8 is encouraged, and its new features may be used soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Web Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;@PolicySets: Policy assertions in predefined groups and scenarios.&lt;/li&gt;
&lt;li&gt;WS-Discovery support: Allows selected deployments to be automatically registered with the &lt;strong&gt;discovery service&lt;/strong&gt;, so outside consumers can discover available endpoints.&lt;/li&gt;
&lt;li&gt;REST: includes RESTEasy 3 - supports the standard Java EE REST APIs (JAX-RS 2.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Optimized &lt;strong&gt;boot process&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Agressive &lt;strong&gt;memory management&lt;/strong&gt; in order to minimize max heap memory allocation (= Less GC). Allow WildFly to run on devices with limited physical resources&lt;/li&gt;
&lt;li&gt;No more &lt;s&gt;&lt;strong&gt;Hierarchical classloading&lt;/strong&gt;&lt;/s&gt; : Wildfly modular structure only links JAR files to the application when it needs it.&lt;/li&gt;
&lt;li&gt;Centralized &lt;strong&gt;settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standalone&lt;/strong&gt; and &lt;strong&gt;Domain&lt;/strong&gt; (+servers) modes&lt;/li&gt;
&lt;li&gt;Deployment API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distributed caching&lt;/strong&gt; (using &lt;a href=&quot;http://infinispan.org/&quot;&gt;Infinispan&lt;/a&gt;, a &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY8/Infinispan+Subsystem&quot;&gt;standalone project&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distributed deployment&lt;/strong&gt; on &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY8/Application+deployment&quot;&gt;managed domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clustering API&lt;/strong&gt; looks very promising. &lt;a href=&quot;http://www.mastertheboss.com/jboss-server/jboss-cluster/monitoring-a-cluster-using-wildfly-api&quot;&gt;Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/&lt;/li&gt;
&lt;li&gt;http://cdn.oreillystatic.com/oreilly/booksamplers/packt/9781783285891_Sample.pdf&lt;/li&gt;
&lt;li&gt;https://www.packtpub.com/application-development/wildfly-new-features&lt;/li&gt;
&lt;li&gt;https://docs.jboss.org/author/display/WFLY8/How+do+I+migrate+my+application+from+AS5+or+AS6+to+WildFly&lt;/li&gt;
&lt;li&gt;http://en.wikipedia.org/wiki/WildFly&lt;/li&gt;
&lt;li&gt;http://www.mastertheboss.com/jboss-server/jboss-cluster/monitoring-a-cluster-using-wildfly-api&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Java 8</title>
   <link href="http://jjcorrea.github.io/2014/12/20/java-8/"/>
   <updated>2014-12-20T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/20/java-8</id>
   <content type="html">&lt;p&gt;This is a basic introduction to the Java 8 new features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda&lt;/li&gt;
&lt;li&gt;Functional Interfaces&lt;/li&gt;
&lt;li&gt;Method references&lt;/li&gt;
&lt;li&gt;Streams&lt;/li&gt;
&lt;li&gt;Default methods&lt;/li&gt;
&lt;li&gt;Nashorn&lt;/li&gt;
&lt;li&gt;New Date and Time API&lt;/li&gt;
&lt;li&gt;Comparisons to Java 7&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lambda&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Maintainability and Readability vs Less code writing. However, Java has an excessive verbosity&lt;/li&gt;
&lt;li&gt;Less boilerplate code&lt;/li&gt;
&lt;li&gt;&amp;quot;Kind of syntatic sugar for annonymous classes&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Lambda support is one of the most visible enhancements of java 8&amp;quot;.&lt;/li&gt;
&lt;li&gt;Cleaner syntax to event listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buttonClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClickEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Your code here&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can be written like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Your code here&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And even in one line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Yes, it works&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the Runnable interface:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Hello, world!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Hello, world!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Functional Interfaces&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You still need to type your references (Java 8 will not infer it).&lt;/li&gt;
&lt;li&gt;Markup interfaces for &amp;#39;functional style&amp;#39; code blocks.&lt;/li&gt;
&lt;li&gt;An interface with exactly one abstract method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.function&lt;/code&gt; contains some of them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can be assigned to anything that fullfill their contract. Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leng2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sample &lt;code&gt;java.util.function&lt;/code&gt; functional interfaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Function&amp;lt;T,R&amp;gt;&lt;/code&gt; - takes an object of type T and returns R.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt; - returns a boolean value based on input of type T.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer&amp;lt;T&amp;gt;&lt;/code&gt; - performs an action with given object of type T.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Method references&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Not abuse of lambda expressions.&lt;/li&gt;
&lt;li&gt;Can refer to a method in its context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileIsPdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*code*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileIsTxt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*code*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileIsRtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*code*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// getFiles() returns a Stream.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FileFilters:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileIsPdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FileFilters:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileIsTxt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;FileFilters:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileIsRtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Streams&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.util.stream&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Supports functional style operations on streams of values&lt;/li&gt;
&lt;li&gt;Something like an iterator. Can be traversed once, and can also be infinite.&lt;/li&gt;
&lt;li&gt;Sequential or Parallel. Can be switched using &lt;code&gt;stream.sequential()&lt;/code&gt; and &lt;code&gt;stream.parallel()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some operations available: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;sorted&lt;/code&gt;,&lt;code&gt;forEach&lt;/code&gt;,&lt;code&gt;count&lt;/code&gt;, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To obtain a stream from a collection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example of functional operations on a stream:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumOfWeights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Default methods&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Default methods = Defender Methods = Virtual Extension methods&lt;/li&gt;
&lt;li&gt;Backwards compatibility&lt;/li&gt;
&lt;li&gt;Collections API needed to support a new feature to &lt;/li&gt;
&lt;li&gt;Can be added to any interface&lt;/li&gt;
&lt;li&gt;Any class that implements the interface, but doesn&amp;#39;t override the method will get the default implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spliterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Multiple defaults:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Foo!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bar!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooBar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;           
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Nashorn&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Successor of Rhino&lt;/li&gt;
&lt;li&gt;JavaScript integrated to the JVM&lt;/li&gt;
&lt;li&gt;Proposal: &lt;a href=&quot;http://openjdk.java.net/jeps/174&quot;&gt;Nashorn JEP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;New Date and Time API&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Historically bad in Java&lt;/li&gt;
&lt;li&gt;Often requires external libraries (e.g. JodaTime)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Comparisons to Java 7&lt;/h2&gt;

&lt;p&gt;Creating an ActionListener&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java 7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getActionCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Java 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;al8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getActionCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Printing out a list of Strings&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java 7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Java 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sorting a list of Strings&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java 7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Java 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sorting complex objects:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenComparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;References:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;https://leanpub.com/whatsnewinjava8/read&lt;/li&gt;
&lt;li&gt;https://www.techempower.com/blog/2013/03/26/everything-about-java-8/&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Enterprise integration patterns</title>
   <link href="http://jjcorrea.github.io/2014/12/20/enterprise-integration-patterns/"/>
   <updated>2014-12-20T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/20/enterprise-integration-patterns</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;TODO.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Property-based testing</title>
   <link href="http://jjcorrea.github.io/2014/12/19/property-based-testing/"/>
   <updated>2014-12-19T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/19/property-based-testing</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;TODO.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Service discovery</title>
   <link href="http://jjcorrea.github.io/2014/12/18/service-discovery/"/>
   <updated>2014-12-18T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/18/service-discovery</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;DRAFT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache ZooKeeper</title>
   <link href="http://jjcorrea.github.io/2014/12/18/apache-zookeeper/"/>
   <updated>2014-12-18T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/18/apache-zookeeper</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;DRAFT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Enables highly reliable distributed coordination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Requirement patterns - Introduction</title>
   <link href="http://jjcorrea.github.io/2014/12/17/software-requirement-patterns/"/>
   <updated>2014-12-17T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/17/software-requirement-patterns</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;DRAFT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Definition&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Traditional approach&lt;/strong&gt;: Up-to-front. Requirements specified before moving to development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extreme approach&lt;/strong&gt;: software production as rapidly as possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental approach&lt;/strong&gt;: Partially up-to-front, partially later on.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;What a software system is for and what it must do&amp;quot;&lt;/em&gt;. &lt;strong&gt;What&lt;/strong&gt; the system needs to do, but not &lt;strong&gt;how&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;problem&lt;/strong&gt; that has to be solved. Does not define a &lt;strong&gt;solution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A single, &lt;strong&gt;measurable objective&lt;/strong&gt; that a system must satisfy.&lt;/li&gt;
&lt;li&gt;Specification = Requirement documents&lt;/li&gt;
&lt;li&gt;Levels = Structure = Epics / Stories / etc.&lt;/li&gt;
&lt;li&gt;Functional vs Non-Functional&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Requirements position on the big picture&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stages&lt;/strong&gt; of development&lt;/li&gt;
&lt;li&gt;Sample stages (not necessarily isolating one od each other): Scope &amp;gt; &lt;strong&gt;Requirements&lt;/strong&gt; &amp;gt; Design &amp;gt; Development &amp;gt; Testing &amp;gt; Deployment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterative&lt;/strong&gt; processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Principles&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Specify the &lt;strong&gt;problem&lt;/strong&gt;, not the &lt;strong&gt;solution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Specify the &lt;strong&gt;system&lt;/strong&gt; not the &lt;strong&gt;project&lt;/strong&gt;. Write every specification to be &lt;strong&gt;timeless&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Specify the &lt;strong&gt;formal and informal&lt;/strong&gt; parts. Requirements as a &lt;strong&gt;contract&lt;/strong&gt; of what must be delivered. The readers need &lt;em&gt;background&lt;/em&gt;, &lt;em&gt;context&lt;/em&gt;, &lt;em&gt;flow&lt;/em&gt; and &lt;em&gt;structure&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;repeatition&lt;/strong&gt; = Less inconsistencies and Extra work&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Lean architecture - Introduction</title>
   <link href="http://jjcorrea.github.io/2014/12/16/lean-architecture-introduction/"/>
   <updated>2014-12-16T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/16/lean-architecture-introduction</id>
   <content type="html">&lt;h2&gt;Touchstones: Lean &amp;amp; Agile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Buzzwords ahead.&lt;/li&gt;
&lt;li&gt;90s management culture = Toyota way / Lean term coined&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value stream&lt;/strong&gt; = primary focus = &amp;quot;Every single activity adds value&amp;quot;&lt;/li&gt;
&lt;li&gt;Waste &lt;em&gt;reduces&lt;/em&gt; value. Constant improvement &lt;em&gt;increases&lt;/em&gt; value&lt;/li&gt;
&lt;li&gt;&amp;quot;All hands on deck&amp;quot; mentality = &lt;strong&gt;Team&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Agile manifesto enphasizes the &lt;strong&gt;customer&lt;/strong&gt;, Lean = &lt;strong&gt;stakeholders&lt;/strong&gt; (everybody in sight)&lt;/li&gt;
&lt;li&gt;Not about working: harder, &amp;quot;smarter&amp;quot;, but more about &lt;strong&gt;focus&lt;/strong&gt; and &lt;strong&gt;discipline&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The architecture should support the company &lt;strong&gt;value stream&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Just in time deliver&lt;/em&gt; instead of &lt;em&gt;stockpilling&lt;/em&gt; software library warehouses = &lt;strong&gt;Continuous flow&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code itself should reflect the end-user mental model of the world&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuous flow&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team mentality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Lightweight architecture&lt;/h3&gt;

&lt;p&gt;Arch with reduced waste incurred by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rework (inadequate planning)&lt;/li&gt;
&lt;li&gt;Unused artifacts (such as comprehensive documentation and &lt;strong&gt;speculative code&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Wait states (handoffs between functional teams, review lifecycle of arch / design documents)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;People say architecture is hard&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complexity&lt;/li&gt;
&lt;li&gt;Takes-a-long-time vs Complexity&lt;/li&gt;
&lt;li&gt;Unite specialists, everybody all together, from early on&lt;/li&gt;
&lt;li&gt;Neither lean nor agile make architecture look easy, but they illuminate the architecture&amp;#39;s value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Architecture value&lt;/h3&gt;

&lt;p&gt;Lean brings that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Careful, up-front planning&lt;/li&gt;
&lt;li&gt;&amp;quot;Everybody, all together, from early on&amp;quot;&lt;/li&gt;
&lt;li&gt;How the architecture can &lt;strong&gt;reduce waste&lt;/strong&gt;, &lt;strong&gt;inconsistency&lt;/strong&gt; and &lt;strong&gt;irregular development&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;How user &lt;strong&gt;engagement and feedback&lt;/strong&gt; can drive down long-term cost&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lean architecture and Agile feature development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Classic approach embraces engineering &lt;em&gt;too early&lt;/em&gt; = Rushes into implementation.&lt;/li&gt;
&lt;li&gt;Lean + Agile encourages changes in those parts of the system which are likely to change - because they aren&amp;#39;t pre-filled with premature structures&lt;/li&gt;
&lt;li&gt;Standards are valuable at level of form, protocols and APIs rather than their implementation&lt;/li&gt;
&lt;li&gt;Agile = Communication and sometimes written documentation in the right medium&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Agile production&lt;/h2&gt;

&lt;h3&gt;Agile builds on Lean&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Agile production plans for &lt;strong&gt;change&lt;/strong&gt;. Stakeholder changes can be propagated without being lost.&lt;/li&gt;
&lt;li&gt;Agile stays lean with its focus on code. &lt;strong&gt;Code isn&amp;#39;t the design&lt;/strong&gt;. The code is the vest way to capture the end-user mental model, and the techniques, problem solving strategies are part of the &lt;strong&gt;design&lt;/strong&gt; process.&lt;/li&gt;
&lt;li&gt;Lean: value sream starts with end-users = Agile: Individuals and interactions over processes and tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The scope of agile systems&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Architecture = Stability. Agile = Change&lt;/li&gt;
&lt;li&gt;Plan for change (70s, 80s) vs Change directly&lt;/li&gt;
&lt;li&gt;&amp;quot;User &lt;strong&gt;expectation&lt;/strong&gt; as the father of change&amp;quot;&lt;/li&gt;
&lt;li&gt;Modern markets = Speed = Adaptation&lt;/li&gt;
&lt;li&gt;Agile adapts to this market due to its accomodation for change&lt;/li&gt;
&lt;li&gt;Fits independently of the feedback value: Formally specified systems (little value) vs No obvious interaction between systems (high value)&lt;/li&gt;
&lt;li&gt;&amp;quot;Lean is an overkill for simple systems&amp;quot;&lt;/li&gt;
&lt;li&gt;Agile can draw on lean to estabilish the boundary conditions necessary for &lt;strong&gt;progress&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Software architecture should reflect the end-user mental model of the world&lt;/li&gt;
&lt;li&gt;System &lt;strong&gt;form&lt;/strong&gt;: Users thought process while viewing the screen, and &lt;em&gt;what the system is&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;System &lt;strong&gt;functionality&lt;/strong&gt;: How the system respond to user input, &lt;em&gt;what the system do&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Stakeholders (early) insight exploration&lt;/li&gt;
&lt;li&gt;Code expresses &lt;em&gt;form&lt;/em&gt; concretely&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Service design patterns - Web services</title>
   <link href="http://jjcorrea.github.io/2014/12/15/service-design-patterns-web-services/"/>
   <updated>2014-12-15T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/15/service-design-patterns-web-services</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;DRAFT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When should a particular api style be used&lt;/li&gt;
&lt;li&gt;client-service &lt;strong&gt;communication&lt;/strong&gt; + foundations for complex conversations (multiple parties, extended periods of time)&lt;/li&gt;
&lt;li&gt;Approaches for implementing service &lt;strong&gt;logic&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decoupling&lt;/strong&gt; clients from the underlying systems used by the service&lt;/li&gt;
&lt;li&gt;Discover &lt;strong&gt;information about a service&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How to support generic functions (authentication, validation, caching) on client / service&lt;/li&gt;
&lt;li&gt;Service changes which &lt;strong&gt;break clients&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version&lt;/strong&gt; services&lt;/li&gt;
&lt;li&gt;Support continuous evolution (business logic) without requiring users to &lt;strong&gt;upgrade&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What are Webservices&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Software function which carries a &lt;strong&gt;business task&lt;/strong&gt;, provide access to files or perform generic functions (authenticating, logging, etc)&lt;/li&gt;
&lt;li&gt;Many different stacks&lt;/li&gt;
&lt;li&gt;Share logical functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Webservices&lt;/strong&gt; integrate disparate systems and &lt;strong&gt;expose reusable business functions&lt;/strong&gt; over HTTP&lt;/li&gt;
&lt;li&gt;Either leverage to HTTP as simple &lt;strong&gt;transport&lt;/strong&gt; over which the data is transfered (SOAP/WSDL) or use it as a complete application protocol that defines the &lt;strong&gt;semantics&lt;/strong&gt; for service behavior (RESTful services) &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;From local objects to distributed objects&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Objects = encapsulate behavior (e.g &lt;strong&gt;business logic&lt;/strong&gt;) and &lt;strong&gt;data&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;White-box &lt;strong&gt;reuse&lt;/strong&gt; = access objects internals&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; between client calls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt; = group related objects into deployable binary software units, that can be plugged into applications. Blackbox reuse - normally not accessible internal objects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remoting&lt;/strong&gt; technologies to support distribution (e.g. CORBA, DCOM, Java RMI)&lt;/li&gt;
&lt;li&gt;Complex implementation. &lt;/li&gt;
&lt;li&gt;Lack of standards (different vendor toolkits had problems to communicate).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;State issue&lt;/h2&gt;

&lt;p&gt;Distributed objects typically maintained state between client calls, what led to a number of &lt;strong&gt;scalability&lt;/strong&gt; problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory utilization degradation with increased client load&lt;/li&gt;
&lt;li&gt;Effective load balance difficulty: User state was hold on a single server, coupling the user to that specific node.&lt;/li&gt;
&lt;li&gt;Server needs to implement a strategy to free memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Why Webservices&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Share common logic with different clients (mobile, desktop, web apps)&lt;/li&gt;
&lt;li&gt;Open standards: independent on the underlying technologies. &lt;/li&gt;
&lt;li&gt;Facilitate complex business processes through &lt;strong&gt;composition&lt;/strong&gt; - possible assembling simple services into workflows&lt;/li&gt;
&lt;li&gt;Clients and services may evolve independently = &lt;strong&gt;indirection&lt;/strong&gt; = &lt;strong&gt;isolation&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;When to use&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Client and service belongs to different domains&lt;/li&gt;
&lt;li&gt;Service functions cannot be easily imported on client&lt;/li&gt;
&lt;li&gt;Client is a complex business process&lt;/li&gt;
&lt;li&gt;Separation between clients and services is natural.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Downs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Expensive calls (e.g serialization / desserialization)&lt;/li&gt;
&lt;li&gt;Network latency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partial failures&lt;/strong&gt;: Client, service or network fails while the others continue operating - requires strategies to detect and handle them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Alternatives&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Service libraries: Imported and executed on the client application&lt;/li&gt;
&lt;li&gt;If client and service were implemented on different platforms, there are ways to integrate them (e.g. JNI / Third-party bridging techniques).&lt;/li&gt;
&lt;li&gt;Network overhead (high-performance / high-load scenario). A &lt;strong&gt;connectionless protocol like UDP&lt;/strong&gt; may be an alternative.&lt;/li&gt;
&lt;li&gt;HTTP is Good for large documents / messages. There are better alternatives for real-time delivery, such as RTSP (real time streaming protocol), RTP (real time transport protocol), RTCP (real time control protocol).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Loose coupling&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There will be always some sort of coupling&lt;/li&gt;
&lt;li&gt;Function coupling: Clients indirectly depend on the service implementation.&lt;/li&gt;
&lt;li&gt;Data structure coupling: Clients need to know which are the input / output formats, encoding, http status codes, etc.&lt;/li&gt;
&lt;li&gt;Temporal coupling: Occurs when the message needs to be processed as soon as it is received. Synchronous (blocking) processes increase this kind of coupling, and asynchronous processes reduces it, despite it adds complexity&lt;/li&gt;
&lt;li&gt;URI coupling: Clients are normally tighly coupled to service URIs. There are a number of patterns to reduce this coupling, as Linked service, service connector, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be continued...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spring 4</title>
   <link href="http://jjcorrea.github.io/2014/12/06/spring-4/"/>
   <updated>2014-12-06T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/06/spring-4</id>
   <content type="html">&lt;h2&gt;A bit of history&lt;/h2&gt;

&lt;p&gt;The Spring Framework was first released in 2004; since then there have been significant major revisions: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring 2.0 provided &lt;strong&gt;XML namespaces&lt;/strong&gt; and &lt;strong&gt;AspectJ support&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Spring 2.5 embraced &lt;strong&gt;annotation-driven configuration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Spring 3.0 introduced a strong &lt;strong&gt;Java 5+ foundation&lt;/strong&gt; across the framework codebase, and features such as the &lt;strong&gt;Java-based @Configuration model&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Version 4.0 is the latest major release of the Spring Framework and the first to fully support &lt;strong&gt;Java 8&lt;/strong&gt; features. You can still use Spring with older versions of Java, however, the minimum requirement has now been raised to Java SE 6. We have also taken the opportunity of a major release to remove many deprecated classes and methods.&lt;/p&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Java 8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditional&lt;/strong&gt; bean definitions&lt;/li&gt;
&lt;li&gt;Autowiring with Generics&lt;/li&gt;
&lt;li&gt;New baseline (JDK6) &amp;amp; deprecated stuff drops &lt;/li&gt;
&lt;li&gt;Spec upgrades: JMS 2.0, JTA 1.2, JPA 1.2, BeanValidation 1.1, JSR-236 Concurrency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lambda support&lt;/strong&gt; taking place of annonymous function blocks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeatable annotations&lt;/strong&gt; (only possible with JDK8)&lt;/li&gt;
&lt;li&gt;Spring formatting framework supporting &lt;em&gt;new Java Date &amp;amp; Time API&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Messaging and WebSocket support&lt;/li&gt;
&lt;li&gt;Testing annotations as &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#integration-testing-annotations-meta&quot;&gt;Meta Annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Java 8 support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Support for &lt;strong&gt;lambda expressions&lt;/strong&gt; &amp;amp; &lt;strong&gt;method references&lt;/strong&gt; with Spring callback interfaces.&lt;/li&gt;
&lt;li&gt;First class support to &lt;strong&gt;java.time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JSR-310 Date and Time&lt;/li&gt;
&lt;li&gt;Repeatable annotations&lt;/li&gt;
&lt;li&gt;Parameter name discovery&lt;/li&gt;
&lt;li&gt;Compatibility with Java 6 &amp;amp; 7 maintained.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conditional&lt;/h2&gt;

&lt;p&gt;Scenario: If &amp;#39;servicedefault&amp;#39; environment variable is set, use &lt;code&gt;Impl1&lt;/code&gt; otherwise use &lt;code&gt;Impl2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using @Configuration&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customerService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;servicedefault&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerServiceImpl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceImpl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using BeanProfiles (Spring 3.1)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceImpl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;prod&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceImpl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using @Conditional. Depends on a set of &lt;code&gt;Condition&lt;/code&gt; classes to specify the predicates.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HardCodedPropertyPresentCondition&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConditionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotatedTypeMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;servicedefault&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HardCodedPropertyAbsentCondition&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConditionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotatedTypeMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;servicedefault&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Conditional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HardCodedPropertyPresentCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceImpl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Conditional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HardCodedPropertyAbsentCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceImpl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Testing meta annotations&lt;/h2&gt;

&lt;p&gt;If we discover that we are repeating the following configuration across our JUnit-based test suite:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/app-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/test-data-access-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/app-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/test-data-access-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can reduce it by introducing a custom composed annotation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/app-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/test-data-access-config.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionalDevTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can use our custom @TransactionalDevTest annotation to simplify the configuration of individual test classes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@TransactionalDevTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@TransactionalDevTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Groovy Bean Definition DSL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bean configuration using Groovy DSL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy language-groovy&quot; data-lang=&quot;groovy&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GroovyBeanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;driverClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;org.hsqldb.jdbcDriver&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jdbc:hsqldb:mem:grailsDB&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sa&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;mynew:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;setting&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nestedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnotherBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Removed deprecated stuff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/3.2.4.RELEASE_to_4.0.0.RELEASE/&quot;&gt;Details&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Generics-based injection matching&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Spring 3.x ignores the generic type.&lt;/li&gt;
&lt;li&gt;Readability + Expressiveness&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBookAdminService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookAdminService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBookAdminService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myAccountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyAccountRepositoryImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Container improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Composable annotation with overridable attributes (e.g. custom scope annotation with proxyModule attribute)&lt;/li&gt;
&lt;li&gt;Conditional bean definitions &lt;code&gt;@Conditional&lt;/code&gt; (e.g. Enable for specific profiles). Foundation for &lt;a href=&quot;http://spring.io/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Autowired&lt;/code&gt; and &lt;code&gt;@Lazy&lt;/code&gt; on injection points - Requesting a lazy-initialization proxy individually per injection point&lt;/li&gt;
&lt;li&gt;Target-class proxies for classes with arbitrary constructors - CGLib proxies using Objenesis, not invoking any constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;WebSocket, SockJS, and STOMP Messaging&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;org.springframework.messaging&lt;/code&gt; module&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message and Channels abstraction&lt;/li&gt;
&lt;li&gt;Endpoints using generic messaging patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Websockets support on Spring MVC:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for raw WebSocket handling&lt;/li&gt;
&lt;li&gt;Flexible endpoints through native server support (Tomcat 7/8, Jetty 9, Glassfish 4, Wildfly 8)&lt;/li&gt;
&lt;li&gt;Transparent SockJS fallback option&lt;/li&gt;
&lt;li&gt;STOMP for higher-level messaging on top of WebSocket channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Spring API examples&lt;/h2&gt;

&lt;h3&gt;JDBCTemplate&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PreparedStatementSetter 
&lt;br/&gt;&lt;small&gt;&lt;code&gt;void setValues(PreparedStatement ps) throws SQLException&lt;/code&gt;&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;RowMapper 
&lt;br/&gt;&lt;small&gt;&lt;code&gt;Object mapRow(ResultSet rs, int rowNum) throws SQLException&lt;/code&gt;&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Lambda&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// V1 - Inline lambda style&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT name, age FROM person WHERE department = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sales&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// V2 style&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT name, age FROM person WHERE department = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sales&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Method reference&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPersonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT name, age FROM person WHERE department = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sales&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Date and Time&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Spring formatting framework supports java 8 date and time (JSR-310)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.format.annotation.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// @DateTimeFormat(iso=ISO.DATE)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DateTimeFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;M/d/yy h:mm&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastContact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Repeatable annotations&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// java 7&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Schedules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 12 * * ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 18 * * ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTempFileCleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java 8&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 12 * * ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 18 * * ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTempFileCleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Parameter name discovery&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Advanced reflection support&lt;/li&gt;
&lt;li&gt;Parameter names on interfaces&lt;/li&gt;
&lt;li&gt;Spring&amp;#39;s &lt;code&gt;DefaultParameterNameDiscoverer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ASM (bytecode manipulation based) &lt;/li&gt;
&lt;li&gt;Java 8 parameter reflection&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMvcController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/books/{id}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookAdminService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Web improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spring-websocket&lt;/code&gt; module &lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-messaging&lt;/code&gt; module adds support for STOMP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Testing Improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Almost all annotations in the spring-test module can be used as &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#integration-testing-annotations-meta&quot;&gt;meta-annotations&lt;/a&gt;  to create &lt;strong&gt;composed annotations&lt;/strong&gt; (reduce configuration duplication) (e.g., &lt;code&gt;@ContextConfiguration&lt;/code&gt;, &lt;code&gt;@WebAppConfiguration&lt;/code&gt;, &lt;code&gt;@ContextHierarchy&lt;/code&gt;, &lt;code&gt;@ActiveProfiles&lt;/code&gt;, etc.) &lt;/li&gt;
&lt;li&gt;Active &lt;strong&gt;Bean definition profiles&lt;/strong&gt; can be resolved programatically implementing a custom &lt;code&gt;ActiveProfilesResolver&lt;/code&gt; and registering it via the &lt;code&gt;resolver&lt;/code&gt; attribute of &lt;code&gt;@ActiveProfiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;SocketUtils&lt;/code&gt; class was introduced to &lt;code&gt;spring-core&lt;/code&gt;. Enables scan free TCP / UDP ports on localhost.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.springframework.mock.web&lt;/code&gt; based on the Servlet 3.0 API (e.g., &lt;code&gt;MockHttpServletRequest&lt;/code&gt;, &lt;code&gt;MockServletContext&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html&lt;/li&gt;
&lt;li&gt;http://www.infoq.com/presentations/spring-4-java8&lt;/li&gt;
&lt;li&gt;http://dsyer.com/presos/decks/spring4.html&lt;/li&gt;
&lt;li&gt;http://www.javacodegeeks.com/2013/10/spring-4-conditional.html&lt;/li&gt;
&lt;li&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#integration-testing-annotations-meta&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Architectural requirements</title>
   <link href="http://jjcorrea.github.io/2014/11/30/architectural-requirements/"/>
   <updated>2014-11-30T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/30/architectural-requirements</id>
   <content type="html">&lt;p&gt;Generally the set of system requirements are defined during the initial steps of the development cycle. It should be seen as the &lt;strong&gt;specification&lt;/strong&gt; of what needs to be implemented. The requirements are descriptions of how the system should &lt;strong&gt;behave&lt;/strong&gt;, contains &lt;strong&gt;domain information&lt;/strong&gt; and &lt;strong&gt;restrictions&lt;/strong&gt; about the system operation.&lt;/p&gt;

&lt;p&gt;During the requirement elucidation phase the software architect / engineer tries to identify the system&amp;#39;m specificities which needs to be supported. Once the set of requirements is obtained, it is then posssible to start the architectural project.&lt;/p&gt;

&lt;p&gt;The software development process based on the architecture puts the architecture as a &lt;strong&gt;guidance&lt;/strong&gt;, as the &lt;strong&gt;orientation&lt;/strong&gt; factor of the process, so we can also say that in an architecture oriented development the requirements are part of the main aspects of the development process.&lt;/p&gt;

&lt;p&gt;The system &lt;strong&gt;complexity&lt;/strong&gt; can be determined by its &lt;strong&gt;functional requirements&lt;/strong&gt; - what it does - and by its &lt;strong&gt;quality / non-functional requirements&lt;/strong&gt; - how it does. The distinction can be done using the following definitions:&lt;/p&gt;

&lt;h2&gt;Functional requirement&lt;/h2&gt;

&lt;p&gt;A software requirement which specifies a &lt;strong&gt;funcionality&lt;/strong&gt; that the system or a software component needs to be able to perform. This requirements define the system &lt;strong&gt;behavior&lt;/strong&gt;, in other words, the transformation process that software or hardware components do on the inputs to generate the outputs (Thayer, 1990).&lt;/p&gt;

&lt;h2&gt;Quality / Non-functional requirement&lt;/h2&gt;

&lt;p&gt;Describes &lt;strong&gt;how&lt;/strong&gt; the software performs its tasks, not what it does. Thus, there are the &lt;em&gt;performance&lt;/em&gt; requirements, &lt;em&gt;restrictions&lt;/em&gt; and software &lt;em&gt;quality&lt;/em&gt; attributes. Non-functional requirements are difficult to test, then they are normally evaluated subjectively (Thayer, 1990).&lt;/p&gt;

&lt;h2&gt;Project attributes&lt;/h2&gt;

&lt;p&gt;There are several &lt;strong&gt;principles&lt;/strong&gt; which guide the software development process, focused on obtaining a final product which satisfies the identified requirements during the process. They are called project attributes.&lt;/p&gt;

&lt;h3&gt;Separation of concerns (SOC)&lt;/h3&gt;

&lt;p&gt;The separation of concerns allows to deal ith &lt;em&gt;different aspects of a problem&lt;/em&gt; focusing in each of them &lt;strong&gt;isolatedly&lt;/strong&gt;. This idea can be applied in order to deal with inherent complexity. The separation of concerns has been applied when a system is &lt;strong&gt;decomposed&lt;/strong&gt; in several modules, with the architecture containing more than one component. &lt;/p&gt;

&lt;p&gt;In this case it allows to separate or isolate part of the system functionality, but how can we determine &lt;em&gt;which part of the system should be separated&lt;/em&gt;? The interest to isolate specific components and its functionalities comes from the target to provide support to a set of quality requirements. So, doing a separation in terms of the system quality requirements is essential to support them appropriately. &lt;/p&gt;

&lt;h3&gt;Abstraction&lt;/h3&gt;

&lt;p&gt;One of the main ways to deal with complexity. It is, in fact, a process in which we can &lt;em&gt;identify the important aspects of some phenomenon and ignore its details&lt;/em&gt;. Abstraction can also be seen as a special case of SOC, where we separate the important aspects concern of the non-important details. By doing so, the engineers can concentrate in what they judge relevant and ignore the details.&lt;/p&gt;

&lt;h3&gt;Modularization&lt;/h3&gt;

&lt;p&gt;When software engineers face a big / complex system they generally divide them into smaller pieces or &lt;strong&gt;modules&lt;/strong&gt; A system composed by a set of modules is called &lt;strong&gt;modular&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One of the main benefits of this attribute is that it allows SOC being applied in two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When dealing with each module details isolatedly, and then ignoring other modules details&lt;/li&gt;
&lt;li&gt;When dealing with general characteristics of all modules, and the existing relations between them, enabling integrating them into a system. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are three targets that modularization tries to obtain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decompose&lt;/strong&gt; a big / complex system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compose&lt;/strong&gt; a system using a set of modules&lt;/li&gt;
&lt;li&gt;Understand the system modularization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its important to notice that a modular system implies in modules with a high level of &lt;strong&gt;cohesion&lt;/strong&gt; and low level of &lt;strong&gt;coupling&lt;/strong&gt;, what allows to consider the modules as black boxes.&lt;/p&gt;

&lt;h3&gt;Resources sharing&lt;/h3&gt;

&lt;p&gt;In modular systems, the components should have a low level of coupling ideally, as it can become difficult to analyze, comprehend, change, test and even reuse highly coupled systems. However, it still possible to have low coupled components even when sharing resources. The resources can be &lt;em&gt;data or services&lt;/em&gt; which are shared across several &lt;strong&gt;independent&lt;/strong&gt; components. &lt;/p&gt;

&lt;p&gt;Notice that sharing resources normally implies in increasing the &lt;strong&gt;integration&lt;/strong&gt; and &lt;strong&gt;portability&lt;/strong&gt; of systems.&lt;/p&gt;

&lt;h2&gt;Non-functional requirements&lt;/h2&gt;

&lt;p&gt;Non-functional requirements have a main role during the system development, they may be used as selection criteria for project alternatives, architectural style and implementation method.
Disregard, of not consider this requirements properly is &lt;strong&gt;admittedly expensive&lt;/strong&gt; and makes it difficult to correct once the system has been implemented (Brooks, 1987).&lt;/p&gt;

&lt;p&gt;Consider the &lt;a href=&quot;http://www.utdallas.edu/%7Echung/RE/IEEE830-1993.pdf&quot;&gt;IEEE-Std 830-1993&lt;/a&gt; (IEEE, 1993) standard. It lists a set of 13 non-functional requirements to be considered in software requirement specification. This pattern includes &lt;strong&gt;performance&lt;/strong&gt; requirements, &lt;strong&gt;reliability&lt;/strong&gt;, &lt;strong&gt;portability&lt;/strong&gt; &amp;amp; &lt;strong&gt;security&lt;/strong&gt;, similarly to another classification presented by Boehm, who looked to list a set of, what he nominated, quality requirements (Boehm, 1976).&lt;/p&gt;

&lt;p&gt;The following picture is an adaptation of Sommerville classification (Sommervile, 1992) summarizes a set of quality requirements important to consider:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/non-functional-requirements.png&quot; alt=&quot;Non-functional requirements&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Usability&lt;/h3&gt;

&lt;p&gt;A quality requirement  of any &lt;strong&gt;interactive&lt;/strong&gt; system. Usability notion comes from the fact that any system designed to be used by people should be easy to &lt;strong&gt;learn&lt;/strong&gt; and &lt;strong&gt;use&lt;/strong&gt;, making it easier and enjoyable to perform any task.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease to learn: Associated to the time and minimal efford required to reach a given level of performance using the system.&lt;/li&gt;
&lt;li&gt;Ease to use: Related to the task execution speed and reduction of errors while using a system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some relevant usability metrics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Time spent performing a task&lt;/li&gt;
&lt;li&gt;Task completion percentage&lt;/li&gt;
&lt;li&gt;Task completion percentage by time unit&lt;/li&gt;
&lt;li&gt;Success / failure rates&lt;/li&gt;
&lt;li&gt;Time consumed by errors&lt;/li&gt;
&lt;li&gt;Error percentage&lt;/li&gt;
&lt;li&gt;Number of commands used&lt;/li&gt;
&lt;li&gt;Number of commands available not used&lt;/li&gt;
&lt;li&gt;&amp;#39;Help&amp;#39; usage frequency&lt;/li&gt;
&lt;li&gt;Number of times the user expresses he&amp;#39;s satisfaction or frustation&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Maintainability&lt;/h3&gt;

&lt;p&gt;A quality requirement normally applied when refering to changes done after the system is available to use. It is a wide term, involving &lt;strong&gt;repair&lt;/strong&gt; (of some existing error), as &lt;strong&gt;change / evolution&lt;/strong&gt; activities.&lt;/p&gt;

&lt;p&gt;The ease of change, adding or modifying some functionality, depends directly on the system architecture. Its important to notice that the architecture define the components and their connections, then also defines under which circumstances they can be changed.&lt;/p&gt;

&lt;h3&gt;Reliability&lt;/h3&gt;

&lt;p&gt;Software reliability is a property of a software not causing a failure during a certain amount of time, under specific conditions. The reliability is generally defined on &lt;strong&gt;statistical behavior&lt;/strong&gt;, it is the probability that a software &lt;em&gt;will operate as expected&lt;/em&gt; during a known interval.&lt;/p&gt;

&lt;p&gt;Some of the metrics used to evaluate software reliability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Its a metric of how available the system would be, in other words, how much available the system would be to perform a task requested by some user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure rate&lt;/strong&gt;: A metric for calculating the &lt;em&gt;frequency in which the system fails&lt;/em&gt; in performing a task requested by a user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure probability&lt;/strong&gt; during operational phase: Metric of the probability that a system will behave in an unexpected way while operating.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Mean_time_between_failures#MTTF_and_MTTFd_calculation&quot;&gt;Mean time to failure (MTTF)&lt;/a&gt;: Metric of time between observable failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Another important quality attribute for software systems. Given the impact it can cause, the performance requirements in the most important quality requirements. Furthermore, performance is important because it affects the system &lt;strong&gt;usability&lt;/strong&gt;, impacting then the users &lt;strong&gt;productivity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The performance requirement restricts the speed of operation of a software system. This can be seen, for example, in terms of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Response requirements&lt;/strong&gt;: Indicates a acceptable response time for system users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throughput requirements&lt;/strong&gt;: Indicates the amount of data that should be processed in a certain time period.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Reuse&lt;/h3&gt;

&lt;p&gt;One of the characteristics of engineering is to make use of existing projects to minimize the efford of new projects. On this way, components which have been already developed and tested could be reused. &lt;/p&gt;

&lt;p&gt;The reuse can be seen on different perspectives. It can be component oriented, process oriented or domain specific. There can be also requirements reuse. About component reuse, it can happen in some of the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: All application could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subsystems&lt;/strong&gt;: The main subsystems of an application could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objects or modules&lt;/strong&gt;: System components, containing a set of functions, could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Components which implement a single function could be reused.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;This post basically walked through a generic process of architectural requirements analysis. The outcome of this process is a set of &lt;strong&gt;functional requirements&lt;/strong&gt;, supported by &lt;strong&gt;use cases&lt;/strong&gt;, a list of &lt;strong&gt;architectural requirements&lt;/strong&gt;, &lt;strong&gt;project attributes&lt;/strong&gt; and &lt;strong&gt;quality (non-functional)&lt;/strong&gt; requirements, which indicate &lt;strong&gt;how&lt;/strong&gt; the system will behave under different &lt;strong&gt;quality scenarios&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architectural styles</title>
   <link href="http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles/"/>
   <updated>2014-11-08T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles</id>
   <content type="html">&lt;p&gt;Given the importance, and the growing need of dealing with &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt; targets, through software architecture techniques (as exposed on the &lt;a href=&quot;/2014/11/03/architecture-oriented-development/&quot;&gt;previous post&lt;/a&gt;), there are categorizations of architectural styles which supports the required characteristics of software systems. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;architectural styles&lt;/strong&gt; use clear &lt;strong&gt;terminologies&lt;/strong&gt;, &lt;strong&gt;properties&lt;/strong&gt; and &lt;strong&gt;restrictions&lt;/strong&gt; to identify the components (a.k.a subsystems) and interaction mechanisms between them, what is specially usefull for software engineers to &lt;strong&gt;reuse&lt;/strong&gt; the architectural patterns on scenarios in which they are needed. &lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;style&lt;/strong&gt; supports a set of &lt;strong&gt;non-functional requirements&lt;/strong&gt; and &lt;strong&gt;project attributes&lt;/strong&gt; what makes possible distinguish between different architectures.&lt;/p&gt;

&lt;h2&gt;#1 Pipes and filters&lt;/h2&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data flow which goes from an edge (&lt;strong&gt;origin&lt;/strong&gt;) to another (&lt;strong&gt;destination&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Data is processed and transformed on &lt;strong&gt;filters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unidirectional&lt;/strong&gt; flow = Operations chaining&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of pipes and filters would be the following UNIX command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sample&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;who &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of &lt;em&gt;who&lt;/em&gt; is a list of currently connected users, and its output is used as the input of &lt;em&gt;sort&lt;/em&gt;, which orders the values alphabetically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-pipe-and-filter.png&quot; alt=&quot;Unix who | sort&quot;&gt;&lt;/p&gt;

&lt;p&gt;The two programs, &lt;em&gt;who&lt;/em&gt; and &lt;em&gt;sort&lt;/em&gt; are &lt;strong&gt;components&lt;/strong&gt; called &lt;strong&gt;filters&lt;/strong&gt;. Notice that the filters can start putting the transformation outcome on the pipes &lt;em&gt;before all the input data is processed&lt;/em&gt;, and that the sort output could lead to another filter represented on the picture by the dotted box.&lt;/p&gt;

&lt;p&gt;Another example of pipes &amp;amp; filters architectural style can be found at the classical &lt;em&gt;compilers&lt;/em&gt; model. The first compilers used to work in two steps: &lt;em&gt;source language analysis&lt;/em&gt; and &lt;em&gt;code synthesis&lt;/em&gt; (Aho, 1987). With the hardware evolution, the need of &lt;strong&gt;portability&lt;/strong&gt; started raising, and the classical model needed to be enhanced to a new process, composed by 3-legged analysis (lexical, syntactic &amp;amp; semantic analysis), and 2-step synthesis (optimization &amp;amp; generation).&lt;/p&gt;

&lt;p&gt;It is worth to comment that this architectural style is normally &lt;strong&gt;flexible&lt;/strong&gt;, enabling the pipes and filters reorganization. Although this style provides &lt;em&gt;maintainability&lt;/em&gt; support in terms of easy reorganization, it is clear that frequent changes on a component (filter) can impact the other components, so maintainability support is limited on this style.&lt;/p&gt;

&lt;h2&gt;#2 Layers&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;layered&lt;/strong&gt; architectural style structures a system into a set of layers, where each of them groups a set of &lt;em&gt;tasks&lt;/em&gt; in a certain level of &lt;em&gt;abstraction&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In a layered architecture, a layer on the N level normally offers a set of functionalities to the above level (N + 1). N uses its functions as well as it uses the functionality provided by the below layer (n - 1). &lt;/p&gt;

&lt;p&gt;A variation of this style could enable the N layer to access N-2, N-3 and so on, but notice that doing so the system &lt;strong&gt;maintainability can be affected&lt;/strong&gt;. Having a bigger dependency level between layers imply on more layers to be changed once having a new requirement or change. &lt;/p&gt;

&lt;p&gt;A good example of this style is the &lt;strong&gt;OSI&lt;/strong&gt; (Open Systems Interconnection) reference model (Tanenbaum, 1988). On this model each &lt;em&gt;layer&lt;/em&gt; can be seen as a &lt;em&gt;component&lt;/em&gt; which can be implemented by software or hardware. It is composed by 7 layers and serves as the computer network protocol architecture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7. Application&lt;/li&gt;
&lt;li&gt;6. Presentation&lt;/li&gt;
&lt;li&gt;5. Session&lt;/li&gt;
&lt;li&gt;4. Transport&lt;/li&gt;
&lt;li&gt;3. Network&lt;/li&gt;
&lt;li&gt;2. Data link&lt;/li&gt;
&lt;li&gt;1. Physical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact a layered architecture gives a higher level of &lt;em&gt;flexibility&lt;/em&gt;, however this has an associate &lt;strong&gt;cost&lt;/strong&gt; on the system &lt;strong&gt;performance&lt;/strong&gt;, as an external request needs to pass through many layers in order to be handled. Anyway, implementing a &lt;strong&gt;monolithic&lt;/strong&gt; system / protocol isn&amp;#39;t an appropriate solution as well.&lt;/p&gt;

&lt;h2&gt;#3 Implicit invocation (Event driven)&lt;/h2&gt;

&lt;p&gt;Differently than the architectural style based on objects, on which one object (component) invokes the other directly through message passing, the implicit invocation style requires the components interested on an &lt;strong&gt;event&lt;/strong&gt; &lt;em&gt;registering&lt;/em&gt; themselves in order to receive it. In this case, the system provides a mechanism for forwarding the events to the registered components.&lt;/p&gt;

&lt;h2&gt;#4 Blackboard&lt;/h2&gt;

&lt;p&gt;The blackboard architectural style emerged on artificial intelligence field, in which it was used as a mechanism for sharing the knowlege (data) between many intelligent components. This style considers the existence of a main data &lt;strong&gt;repository&lt;/strong&gt; surrounded by a set of components called knowlege sources (KSs).&lt;/p&gt;

&lt;p&gt;The blackboard architectural style is based on a sproblem solving model which provides a conceptual structure for organizing the domain knowlege as well as a strategy to apply that knowlege.&lt;/p&gt;

&lt;p&gt;The style consists on 3 basic components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Knowlege sources&lt;/strong&gt;: The knowlege needed for solving a problem is partitioned in knowlege sources. Each source is &lt;strong&gt;separated&lt;/strong&gt; and &lt;strong&gt;independant&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blackboard data structure&lt;/strong&gt;: The problem solving data is maintained in a &lt;strong&gt;shared database&lt;/strong&gt;, called blackboard. The knowlege sources causes modifications on the blackboard, what triggers changes until having a final &lt;strong&gt;solution&lt;/strong&gt;. All interactions and communication between sources occurs only though this blackboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control&lt;/strong&gt;: The knowlege sources &lt;strong&gt;reacts&lt;/strong&gt; to changes on the blackboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-blackboard.png&quot; alt=&quot;Blackboard organization&quot;&gt;&lt;/p&gt;

&lt;p&gt;This architectural style is recommented on applications where several types of knowlege should be considered in order to interpret a set of initial data. It was tipically used on cases where there was &lt;em&gt;no general solution&lt;/em&gt; for a problem. One or more components (KSs) interacts with the shared database (blackboard) looking for a &lt;strong&gt;partial&lt;/strong&gt; or &lt;strong&gt;total&lt;/strong&gt; solution for the problem (in the case of a &lt;em&gt;partial solution&lt;/em&gt;, another component can be activated then).&lt;/p&gt;

&lt;h2&gt;#5 Distributed systems&lt;/h2&gt;

&lt;p&gt;There are several architectural models in which regards distributed systems. We are going to see two of the most common styles: &lt;strong&gt;Multiprocessor&lt;/strong&gt; and &lt;strong&gt;multicomputer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;multiprocessor&lt;/strong&gt; architecture comprehends many processors &lt;em&gt;sharing&lt;/em&gt; a primary memory. This style is appropriate to &lt;em&gt;execute several subtasks simultaneously&lt;/em&gt; in a &lt;em&gt;same program&lt;/em&gt;. On the other hand, a &lt;strong&gt;multicomputer&lt;/strong&gt; architecture is similar to multiprocessors, except that the processors &lt;em&gt;doesn&amp;#39;t share memory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-distributed.png&quot; alt=&quot;Distributed system&quot;&gt;&lt;/p&gt;

&lt;p&gt;The distributed system consists on &lt;em&gt;multiple processors&lt;/em&gt; which uses message passing mechanisms to communicate to each other. In other words, a distributed application can be seen as a concurrent program in which the processes communicate through message passing. Consists on four (4) types of processes (components):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;: A data &lt;em&gt;transformer&lt;/em&gt;. Receives a data flow as input, runs computations and put the outcomes on the output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: Can be seen as a &lt;em&gt;process&lt;/em&gt;. In a client-server interaction, a &lt;em&gt;client&lt;/em&gt; is a component which starts some activity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: Different than a client, a &lt;em&gt;server&lt;/em&gt; waits for client requests to handle them. In other words, a server is a &lt;strong&gt;reactive&lt;/strong&gt; process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer&lt;/strong&gt;: One in a set of identical processes which interacts to offer some service or perform some parallel computation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;#6 Communicating processes&lt;/h2&gt;

&lt;p&gt;Fits in the set of distributed application architectures. The communicating processes style is used when the priority goals of the system are &lt;strong&gt;scalability&lt;/strong&gt; and &lt;strong&gt;ease of change&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example is a system in which there is a set replicated of &lt;strong&gt;workers&lt;/strong&gt; (computational components) which share a single task repository. Different than descentralized servers which holds multiple &lt;em&gt;copies of data&lt;/em&gt;, this style provides several &lt;em&gt;copies of the components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This style is used in parallel systems when dealing with the &lt;a href=&quot;http://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; (Single Instruction, Multiple Data) paradigm.&lt;/p&gt;

&lt;h2&gt;#7 Client-Server&lt;/h2&gt;

&lt;p&gt;Another architectural style which fits in distributed architectures is client-server. This style allows the tasks being divided between data &lt;strong&gt;producers&lt;/strong&gt; and &lt;strong&gt;consumers&lt;/strong&gt;. A &lt;em&gt;server&lt;/em&gt; is a process which waits for requests from one or more &lt;em&gt;clients&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of removing and / or adding clients, due to the processes &lt;em&gt;independence&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ease of changing &lt;em&gt;client functionalities&lt;/em&gt; given other clients are not affected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Style variations&lt;/h2&gt;

&lt;p&gt;There is a significant amount of architectural styles nowadays, and there are also variations of that styles. When presenting a style it is important to notice the system &lt;strong&gt;non-functional / quality requirements&lt;/strong&gt;, which can be for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of change&lt;/li&gt;
&lt;li&gt;Maintainability&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Fault tolerance&lt;/li&gt;
&lt;li&gt;Interoperability&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to notice that in practice a system architecture is almost never obtained from a single style. Given that, a software architect needs to understand the &lt;em&gt;relationships&lt;/em&gt; between styles, what requires knowing the project &lt;strong&gt;attributes&lt;/strong&gt;, &lt;strong&gt;non-functional requirements&lt;/strong&gt; as well as requires an &lt;strong&gt;architectural analysis&lt;/strong&gt; process, anwering questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which is the architectural style &lt;strong&gt;topology&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How does the &lt;strong&gt;data transfer&lt;/strong&gt; and / or &lt;strong&gt;control&lt;/strong&gt; occurs between components?&lt;/li&gt;
&lt;li&gt;Which type of components and &lt;strong&gt;connectors&lt;/strong&gt; are used on this style?&lt;/li&gt;
&lt;li&gt;How is the control shared between components?&lt;/li&gt;
&lt;li&gt;Is there some interaction between data and control?&lt;/li&gt;
&lt;li&gt;Has the type of analysis have any influence on the style?&lt;/li&gt;
&lt;li&gt;Does the components interact &lt;strong&gt;synchronously&lt;/strong&gt; or &lt;strong&gt;asynchronously&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the main aspects of an architectural project is the use of system &lt;strong&gt;organization patterns&lt;/strong&gt;. Many of this patterns, also called &lt;strong&gt;architectural styles&lt;/strong&gt;, have been developed across the time once software engineers recognized the value of organization and structure principles for certain categories of software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architecture oriented development</title>
   <link href="http://jjcorrea.github.io/2014/11/03/architecture-oriented-development/"/>
   <updated>2014-11-03T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/03/architecture-oriented-development</id>
   <content type="html">&lt;p&gt;Aproximately 50 years ago, software consisted on a tiny part of the overall technological landscape, in which the hardware (electronic components, circuits, etc) was the most important player.&lt;/p&gt;

&lt;p&gt;On the other hand, once software became significantly more important to computational systems, and once it started getting more popular, also being part of major of personal and professional activities ubiquitously, the &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt; of those systems urged for better solutions than the existing &lt;strong&gt;abstraction&lt;/strong&gt; techniques which remained until the end of the 80s, as abstract data types (ADTs), high level programming languages, and modular decomposition techniques.&lt;/p&gt;

&lt;p&gt;Notice &lt;strong&gt;abstraction&lt;/strong&gt; as a way to deal with the complexity of problems and systems. As human beings we are regularly rebuilding an existing pattern in a different context, so the abstration essence is to &lt;em&gt;recognize a pattern&lt;/em&gt;, give it a &lt;em&gt;name&lt;/em&gt;, define its &lt;em&gt;usage&lt;/em&gt; and look for consistent ways to &lt;em&gt;specify&lt;/em&gt; it.&lt;/p&gt;

&lt;h2&gt;Technologial evolution&lt;/h2&gt;

&lt;p&gt;After the first completely electronic general purpose computer (ENIAC) was created at the University of Pensilvania, between 1942 and 1945, until the 60s there was a very limited software production, and the size of them was small at all.&lt;/p&gt;

&lt;p&gt;However, little by little, software has become a key technology for handling from the simpler applications to the most complex businesses. The technology industy started being one of the most competitive businesses in the world, and the &amp;quot;Software&amp;quot; component became a prevailing force in terms of &lt;strong&gt;technological innovation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Despite the importance of this news technology had at that moment, there were no &lt;strong&gt;tools&lt;/strong&gt; supporting software development, and little is known about its &lt;strong&gt;development process&lt;/strong&gt;. On the same time, the role of &lt;strong&gt;maintenance&lt;/strong&gt; began to stand out.&lt;/p&gt;

&lt;p&gt;All this factors contributed to the emmergence of the &lt;strong&gt;software engineering&lt;/strong&gt;, term coined in a seminal NATO conference which happened in 1968.&lt;/p&gt;

&lt;h2&gt;Software Engineering&lt;/h2&gt;

&lt;p&gt;The central idea in software engineering is to take advantage of engineering &lt;strong&gt;principles&lt;/strong&gt; to produce, with low cost, software which runs &lt;strong&gt;correctly&lt;/strong&gt; and &lt;strong&gt;efficiently&lt;/strong&gt; on the equipments in which they are installed. So once software started having more space, many &lt;strong&gt;software engineering paradigms&lt;/strong&gt; arised. &lt;/p&gt;

&lt;h2&gt;The Software systems nature&lt;/h2&gt;

&lt;p&gt;What makes a system well architected? Someone could say it is when the system does what the user expects. However a more general quality evaluation requires the identification of the well architected software attributes. There are two important attributes in particular that deserves our attention: &lt;strong&gt;reliability&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An appropriate level of &lt;strong&gt;reliability&lt;/strong&gt; is essential to a software system, independent of its usage. The reliability is an important attribute of software &lt;strong&gt;quality&lt;/strong&gt;, implying that the application will perform its functions as expected.&lt;/p&gt;

&lt;p&gt;In this context, &lt;strong&gt;maintainability&lt;/strong&gt; has two different aspects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need of repair: Implementaion defects which require fixes.&lt;/li&gt;
&lt;li&gt;Need of evolution: New requirements satisfaction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Software architecture&lt;/h2&gt;

&lt;p&gt;Given the growth in terms of &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt;, the development problems started exceeding the &lt;strong&gt;data structures&lt;/strong&gt; and &lt;strong&gt;algorithms&lt;/strong&gt;... design the global system structure raises as a new problem, in other words, software development oriented to the architecture.&lt;/p&gt;

&lt;p&gt;The architectural software development comprehends structural issues as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project &lt;strong&gt;alternatives&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; &amp;amp; &lt;strong&gt;scalability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Organization and general &lt;strong&gt;control structure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Communication &lt;strong&gt;protocols&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Project &lt;strong&gt;components functionality&lt;/strong&gt; assignment &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to be able to recognize common used structures, and also understand the existing architectures, what helps the engineers to make better decisions about the project alternatives. &lt;/p&gt;

&lt;p&gt;Software architecture is the study of the global organization of sofware systems, as well as its subsystems &amp;amp; components relationships. It explores &lt;strong&gt;notations&lt;/strong&gt;, &lt;strong&gt;tools&lt;/strong&gt; and &lt;strong&gt;analysis&lt;/strong&gt; techniques and components &lt;strong&gt;reuse&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The need of the software architecture role&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Act as an structure which enables attending the system requirements&lt;/li&gt;
&lt;li&gt;Serve as the base for consistency and dependeny analysis&lt;/li&gt;
&lt;li&gt;Support reuse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
To be continued...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gatling</title>
   <link href="http://jjcorrea.github.io/2014/10/19/gatling/"/>
   <updated>2014-10-19T01:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/10/19/gatling</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.0.0-M3a&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stress testing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Kibana</title>
   <link href="http://jjcorrea.github.io/2014/08/31/kibana/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/kibana</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;3.1.0&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visualize logs and time-stamped data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Charts&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Aggregation&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Monitoring&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real-time&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;No code required&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Easy setup&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Flume / FluentD Integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;UX&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Few documentation&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Query + Filtering ?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lucene powered queries through ElasticSearch&lt;/li&gt;
&lt;li&gt;Nice sample dashboards&lt;/li&gt;
&lt;li&gt;Really cool graph facets&lt;/li&gt;
&lt;li&gt;Flexible graph configuration (multiple aggregation formulas &amp;amp; options)&lt;/li&gt;
&lt;li&gt;Interesting configurable dashboard grid, but row management &amp;amp; alignment is poor&lt;/li&gt;
&lt;li&gt;Dynamic dashboard (Auto-refresh) &amp;amp; Interval&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ELK Platform</title>
   <link href="http://jjcorrea.github.io/2014/08/31/elk-platform/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/elk-platform</id>
   <content type="html">&lt;p&gt;By combining the massively popular &lt;strong&gt;E&lt;/strong&gt;lasticsearch, &lt;strong&gt;L&lt;/strong&gt;ogstash and &lt;strong&gt;K&lt;/strong&gt;ibana (&lt;a target=&quot;_blank&quot; href=&quot;http://www.elasticsearch.org/overview/&quot;&gt;ELK platform overview&lt;/a&gt;) we have created an end-to-end stack that delivers actionable insights in real-time from almost any type of structured and unstructured data source. &lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analize&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real time&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/joelcorrea/elk-stack-for-application-events-monitoring/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Dive in&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/24/elastic-search/&quot;&gt;Elastic Search Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/25/logstash/&quot;&gt;Logstash Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/31/kibana/&quot;&gt;Kibana Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Logstash</title>
   <link href="http://jjcorrea.github.io/2014/08/25/logstash/"/>
   <updated>2014-08-25T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/25/logstash</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.4.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A tool for managing events and logs. &lt;/p&gt;

&lt;p&gt;You can use it to collect logs, parse them, and store them for later use (like, for searching). Speaking of searching, logstash comes with a web interface for searching and drilling into all of your logs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;BigData&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Filter&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Extensible&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;SOC&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;ELK stack integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;JRuby&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Poor documentation&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Transform, and process logs to and from anywhere &lt;/li&gt;
&lt;li&gt;Provide search and analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Inputs, Filters and Outputs (Plugins)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Input&lt;/em&gt;: Stream source&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Filter&lt;/em&gt;: Extracts what you are interested from the stream.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Output&lt;/em&gt;: Sends the extracted stuff somewhere.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Codec&lt;/em&gt;: Decode (via inputs) and Encode (via outputs) a message&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;Simplest configuration example&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }
output { stdout {} }
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; ./logstash agent -f my.conf
&gt; 1
2014-08-26T02:42:21.416+0000 joelcorrea.local 1
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Using codecs&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }

output {
  stdout { codec =&gt; json }
}
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; 1
{&quot;message&quot;:&quot;1&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:44:29.809Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;}
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Grok: A collection of pre-defined patterns &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elasticsearch/logstash/tree/master/patterns/grok-patterns&quot;&gt;Have a look on them&lt;/a&gt; (&lt;a href=&quot;https://grokdebug.herokuapp.com/&quot;&gt;You can debug it&lt;/a&gt;)
&lt;pre class=&quot;message&quot;&gt;
input {
  stdin {}
}
filter {
  grok { 
    match =&amp;gt; [ &amp;quot;message&amp;quot;, &amp;quot;name: %{WORD:custom&lt;em&gt;name}&amp;quot; ] 
  }
  mutate { lowercase =&amp;gt; [ &amp;quot;custom&lt;/em&gt;name&amp;quot; ]
}
output {
    stdout{codec =&amp;gt; json}
}
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; name: Joel
{&quot;message&quot;:&quot;name: Joel&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:56:57.461Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;,&quot;custom_name&quot;:&quot;joel&quot;}
&lt;/pre&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://writequit.org/articles/logstash-intro.html&quot;&gt;Logstash Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;Logstash 1.4.2 Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michael.bouvy.net/blog/en/2013/11/19/collect-visualize-your-logs-logstash-elasticsearch-redis-kibana/&quot;&gt;Collect &amp;amp; visualize your logs with Logstash, Elasticsearch &amp;amp; Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Elastic Search</title>
   <link href="http://jjcorrea.github.io/2014/08/24/elastic-search/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/elastic-search</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.3.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Search, analyze in real-time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CouchBase</title>
   <link href="http://jjcorrea.github.io/2014/08/24/couch-base/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/couch-base</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.5.1&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;World&amp;#39;s most complete, most scalable and best performing NoSQL database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Performance&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Availability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Builtin Cache&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Auto-sharding&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Incremental Map-Reduce&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Monitoring UI&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Geographic strength&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Multiple Connectors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-warning&quot;&gt;Key-Value&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;Document based&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-danger&quot;&gt;No HTTP API&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Data / NoSQL Reference</title>
   <link href="http://jjcorrea.github.io/2014/08/24/big-data-nosql/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/big-data-nosql</id>
   <content type="html">&lt;h3&gt;Challenges&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Compression&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Statistics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Storage&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analysis&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Transport&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Auto-sharding â A NoSQL database automatically spreads data across servers, without requiring applications to participate. Servers can be added or removed from the data layer without application downtime, with data (and I/O) automatically spread across the servers. Most NoSQL databases also support data replication, storing multiple copies of data across the cluster, and even across data centers, to ensure high availability and support disaster recovery. A properly managed NoSQL database system should never need to be taken offline, for any reason, supporting 24x365 continuous operation of applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distributed query support â âShardingâ a relational database can reduce, or eliminate in certain cases, the ability to perform complex data queries. NoSQL database systems retain their full query expressive power even when distributed across hundreds of servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrated caching â To reduce latency and increase sustained data throughput, advanced NoSQL database technologies transparently cache data in system memory. This behavior is transparent to the application developer and the operations team, compared to relational technology where a caching tier is usually a separate infrastructure tier that must be developed to, deployed on separate servers, and explicitly managed by the ops team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;References &amp;amp; Related stuff&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.edureka.co/about-big-data-and-hadoop&quot;&gt;Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Q76-fCqVjhU&quot;&gt;Spark &amp;amp; Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtojboss.com/2013/09/04/ampd-for-hadoop-alternatives/&quot;&gt;Hadoop alternatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Spark</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-spark/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-spark</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.0.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An open-source clustered data analytics framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Cluster computing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Scala, Java &amp;amp; Python API&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analytics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Batch processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Stream processing (Real time)&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Spark SQL&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;MLib&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;GraphX&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;Spark Streaming&lt;/span&gt; 
&lt;span class=&quot;label label-warning&quot;&gt;Storage = Hadoop FS&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;Shared variables&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/programming-guide.html&lt;/p&gt;

&lt;p&gt;The main spark abstraction provides RDDs (&lt;strong&gt;Resilient distributed dataset&lt;/strong&gt;) - A collection of elements &lt;strong&gt;partitioned&lt;/strong&gt; across the nodes of a cluster, which can be operated in &lt;strong&gt;parallel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;RDDs are created by starting with a file in &lt;strong&gt;Hadoop filesystem&lt;/strong&gt; (or any other &lt;em&gt;Hadoop supported filesystem&lt;/em&gt;), it is possible to persist RDD &lt;strong&gt;in memory&lt;/strong&gt;, allowing it to be reused efficiently across parallel operations. RDDs also &lt;strong&gt;recover node failures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is also the notion of &lt;strong&gt;shared variables&lt;/strong&gt;. which &lt;em&gt;can be used&lt;/em&gt; in parallel operations. Two possible types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Broadcast variables&lt;/strong&gt; - Cache a value in memory (all nodes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulators&lt;/strong&gt; - Counters, Sums, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spark-rdd.png&quot; alt=&quot;RDD&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Shell&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/sql-programming-guide.html&lt;/p&gt;

&lt;h2&gt;Spark SQL&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/sql-programming-guide.html&lt;/p&gt;

&lt;h2&gt;MLib&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/mllib-guide.html&lt;/p&gt;

&lt;h2&gt;GraphX&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/graphx-programming-guide.html&lt;/p&gt;

&lt;h2&gt;Cluster mode&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/cluster-overview.html&lt;/p&gt;

&lt;h2&gt;Spark Streaming&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/streaming-programming-guide.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Mesos</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-mesos/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-mesos</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;0.19&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Develop and run resource-efficient distributed systems&lt;/p&gt;

&lt;p&gt;A cluster manager that simplifies the complexity of running applications on a shared pool of servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Cluster management&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Pool&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fault-tolerant replicated master using ZooKeeper&lt;/li&gt;
&lt;li&gt;Scalability to 10,000s of nodes&lt;/li&gt;
&lt;li&gt;Isolation between tasks with Linux Containers&lt;/li&gt;
&lt;li&gt;Multi-resource scheduling (memory and CPU aware)&lt;/li&gt;
&lt;li&gt;Java, Python and C++ APIs for developing new parallel applications&lt;/li&gt;
&lt;li&gt;Web UI for viewing cluster state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Who is using&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://ebay.com&quot;&gt;eBay&lt;/a&gt;, &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;, &lt;a href=&quot;http://paypal.com&quot;&gt;PayPal&lt;/a&gt;, &lt;a href=&quot;http://airbnb.com&quot;&gt;Airbnb&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Giving a try&lt;/h3&gt;

&lt;div class=&quot;message&quot;&gt;...&lt;/div&gt;
</content>
 </entry>
 

</feed>
