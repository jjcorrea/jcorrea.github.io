<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Joel CorrÃªa</title>
 <link href="http://jjcorrea.github.io/atom.xml" rel="self"/>
 <link href="http://jjcorrea.github.io/"/>
 <updated>2014-11-16T19:46:26-02:00</updated>
 <id>http://jjcorrea.github.io</id>
 <author>
   <name>Joel Correa</name>
   <email></email>
 </author>

 
 <entry>
   <title>Architectural styles</title>
   <link href="http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles/"/>
   <updated>2014-11-08T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles</id>
   <content type="html">&lt;p&gt;Given the importance, and the growing need of dealing with &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt; targets, through software architecture techniques (as exposed on the &lt;a href=&quot;/2014/11/03/architecture-oriented-development/&quot;&gt;previous post&lt;/a&gt;), there are categorizations of architectural styles which supports the required characteristics of software systems. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;architectural styles&lt;/strong&gt; use clear &lt;strong&gt;terminologies&lt;/strong&gt;, &lt;strong&gt;properties&lt;/strong&gt; and &lt;strong&gt;restrictions&lt;/strong&gt; to identify the components (a.k.a subsystems) and interaction mechanisms between them, what is specially usefull for software engineers to &lt;strong&gt;reuse&lt;/strong&gt; the architectural patterns on scenarios in which they are needed. &lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;style&lt;/strong&gt; supports a set of &lt;strong&gt;non-functional requirements&lt;/strong&gt; and &lt;strong&gt;project attributes&lt;/strong&gt; what makes possible distinguish between different architectures.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#1 Pipes and filters&lt;/h2&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data flow which goes from an edge (&lt;strong&gt;origin&lt;/strong&gt;) to another (&lt;strong&gt;destination&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Data is processed and transformed on &lt;strong&gt;filters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unidirectional&lt;/strong&gt; flow = Operations chaining&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of pipes and filters would be the following UNIX command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sample&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;who &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of &lt;em&gt;who&lt;/em&gt; is a list of currently connected users, and its output is used as the input of &lt;em&gt;sort&lt;/em&gt;, which orders the values alphabetically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-pipe-and-filter.png&quot; alt=&quot;Unix who | sort&quot;&gt;&lt;/p&gt;

&lt;p&gt;The two programs, &lt;em&gt;who&lt;/em&gt; and &lt;em&gt;sort&lt;/em&gt; are &lt;strong&gt;components&lt;/strong&gt; called &lt;strong&gt;filters&lt;/strong&gt;. Notice that the filters can start putting the transformation outcome on the pipes &lt;em&gt;before all the input data is processed&lt;/em&gt;, and that the sort output could lead to another filter represented on the picture by the dotted box.&lt;/p&gt;

&lt;p&gt;Another example of pipes &amp;amp; filters architectural style can be found at the classical &lt;em&gt;compilers&lt;/em&gt; model. The first compilers used to work in two steps: &lt;em&gt;source language analysis&lt;/em&gt; and &lt;em&gt;code synthesis&lt;/em&gt; (Aho, 1987). With the hardware evolution, the need of &lt;strong&gt;portability&lt;/strong&gt; started raising, and the classical model needed to be enhanced to a new process, composed by 3-legged analysis (lexical, syntactic &amp;amp; semantic analysis), and 2-step synthesis (optimization &amp;amp; generation).&lt;/p&gt;

&lt;p&gt;It is worth to comment that this architectural style is normally &lt;strong&gt;flexible&lt;/strong&gt;, enabling the pipes and filters reorganization. Although this style provides &lt;em&gt;maintainability&lt;/em&gt; support in terms of easy reorganization, it is clear that frequent changes on a component (filter) can impact the other components, so maintainability support is limited on this style.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#2 Layers&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;layered&lt;/strong&gt; architectural style structures a system into a set of layers, where each of them groups a set of &lt;em&gt;tasks&lt;/em&gt; in a certain level of &lt;em&gt;abstraction&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In a layered architecture, a layer on the N level normally offers a set of functionalities to the above level (N + 1). N uses its functions as well as it uses the functionality provided by the below layer (n - 1). &lt;/p&gt;

&lt;p&gt;A variation of this style could enable the N layer to access N-2, N-3 and so on, but notice that doing so the system &lt;strong&gt;maintainability can be affected&lt;/strong&gt;. Having a bigger dependency level between layers imply on more layers to be changed once having a new requirement or change. &lt;/p&gt;

&lt;p&gt;A good example of this style is the &lt;strong&gt;OSI&lt;/strong&gt; (Open Systems Interconnection) reference model (Tanenbaum, 1988). On this model each &lt;em&gt;layer&lt;/em&gt; can be seen as a &lt;em&gt;component&lt;/em&gt; which can be implemented by software or hardware. It is composed by 7 layers and serves as the computer network protocol architecture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7. Application&lt;/li&gt;
&lt;li&gt;6. Presentation&lt;/li&gt;
&lt;li&gt;5. Session&lt;/li&gt;
&lt;li&gt;4. Transport&lt;/li&gt;
&lt;li&gt;3. Network&lt;/li&gt;
&lt;li&gt;2. Data link&lt;/li&gt;
&lt;li&gt;1. Physical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact a layered architecture gives a higher level of &lt;em&gt;flexibility&lt;/em&gt;, however this has an associate &lt;strong&gt;cost&lt;/strong&gt; on the system &lt;strong&gt;performance&lt;/strong&gt;, as an external request needs to pass through many layers in order to be handled. Anyway, implementing a &lt;strong&gt;monolithic&lt;/strong&gt; system / protocol isn&amp;#39;t an appropriate solution as well.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#3 Implicit invocation (Event driven)&lt;/h2&gt;

&lt;p&gt;Differently than the architectural style based on objects, on which one object (component) invokes the other directly through message passing, the implicit invocation style requires the components interested on an &lt;strong&gt;event&lt;/strong&gt; &lt;em&gt;registering&lt;/em&gt; themselves in order to receive it. In this case, the system provides a mechanism for forwarding the events to the registered components.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#4 Blackboard&lt;/h2&gt;

&lt;p&gt;The blackboard architectural style emerged on artificial intelligence field, in which it was used as a mechanism for sharing the knowlege (data) between many intelligent components. This style considers the existence of a main data &lt;strong&gt;repository&lt;/strong&gt; surrounded by a set of components called knowlege sources (KSs).&lt;/p&gt;

&lt;p&gt;The blackboard architectural style is based on a sproblem solving model which provides a conceptual structure for organizing the domain knowlege as well as a strategy to apply that knowlege.&lt;/p&gt;

&lt;p&gt;The style consists on 3 basic components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Knowlege sources&lt;/strong&gt;: The knowlege needed for solving a problem is partitioned in knowlege sources. Each source is &lt;strong&gt;separated&lt;/strong&gt; and &lt;strong&gt;independant&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blackboard data structure&lt;/strong&gt;: The problem solving data is maintained in a &lt;strong&gt;shared database&lt;/strong&gt;, called blackboard. The knowlege sources causes modifications on the blackboard, what triggers changes until having a final &lt;strong&gt;solution&lt;/strong&gt;. All interactions and communication between sources occurs only though this blackboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control&lt;/strong&gt;: The knowlege sources &lt;strong&gt;reacts&lt;/strong&gt; to changes on the blackboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-blackboard.png&quot; alt=&quot;Blackboard organization&quot;&gt;&lt;/p&gt;

&lt;p&gt;This architectural style is recommented on applications where several types of knowlege should be considered in order to interpret a set of initial data. It was tipically used on cases where there was &lt;em&gt;no general solution&lt;/em&gt; for a problem. One or more components (KSs) interacts with the shared database (blackboard) looking for a &lt;strong&gt;partial&lt;/strong&gt; or &lt;strong&gt;total&lt;/strong&gt; solution for the problem (in the case of a &lt;em&gt;partial solution&lt;/em&gt;, another component can be activated then).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#5 Distributed systems&lt;/h2&gt;

&lt;p&gt;There are several architectural models in which regards distributed systems. We are going to see two of the most common styles: &lt;strong&gt;Multiprocessor&lt;/strong&gt; and &lt;strong&gt;multicomputer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;multiprocessor&lt;/strong&gt; architecture comprehends many processors &lt;em&gt;sharing&lt;/em&gt; a primary memory. This style is appropriate to &lt;em&gt;execute several subtasks simultaneously&lt;/em&gt; in a &lt;em&gt;same program&lt;/em&gt;. On the other hand, a &lt;strong&gt;multicomputer&lt;/strong&gt; architecture is similar to multiprocessors, except that the processors &lt;em&gt;doesn&amp;#39;t share memory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-distributed.png&quot; alt=&quot;Distributed system&quot;&gt;&lt;/p&gt;

&lt;p&gt;The distributed system consists on &lt;em&gt;multiple processors&lt;/em&gt; which uses message passing mechanisms to communicate to each other. In other words, a distributed application can be seen as a concurrent program in which the processes communicate through message passing. Consists on four (4) types of processes (components):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;: A data &lt;em&gt;transformer&lt;/em&gt;. Receives a data flow as input, runs computations and put the outcomes on the output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: Can be seen as a &lt;em&gt;process&lt;/em&gt;. In a client-server interaction, a &lt;em&gt;client&lt;/em&gt; is a component which starts some activity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: Different than a client, a &lt;em&gt;server&lt;/em&gt; waits for client requests to handle them. In other words, a server is a &lt;strong&gt;reactive&lt;/strong&gt; process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer&lt;/strong&gt;: One in a set of identical processes which interacts to offer some service or perform some parallel computation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#6 Communicating processes&lt;/h2&gt;

&lt;p&gt;Fits in the set of distributed application architectures. The communicating processes style is used when the priority goals of the system are &lt;strong&gt;scalability&lt;/strong&gt; and &lt;strong&gt;ease of change&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example is a system in which there is a set replicated of &lt;strong&gt;workers&lt;/strong&gt; (computational components) which share a single task repository. Different than descentralized servers which holds multiple &lt;em&gt;copies of data&lt;/em&gt;, this style provides several &lt;em&gt;copies of the components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This style is used in parallel systems when dealing with the &lt;a href=&quot;http://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; (Single Instruction, Multiple Data) paradigm.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;#7 Client-Server&lt;/h2&gt;

&lt;p&gt;Another architectural style which fits in distributed architectures is client-server. This style allows the tasks being divided between data &lt;strong&gt;producers&lt;/strong&gt; and &lt;strong&gt;consumers&lt;/strong&gt;. A &lt;em&gt;server&lt;/em&gt; is a process which waits for requests from one or more &lt;em&gt;clients&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of removing and / or adding clients, due to the processes &lt;em&gt;independence&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ease of changing &lt;em&gt;client functionalities&lt;/em&gt; given other clients are not affected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Style variations&lt;/h2&gt;

&lt;p&gt;There is a significant amount of architectural styles nowadays, and there are also variations of that styles. When presenting a style it is important to notice the system &lt;strong&gt;non-functional / quality requirements&lt;/strong&gt;, which can be for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of change&lt;/li&gt;
&lt;li&gt;Maintainability&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Fault tolerance&lt;/li&gt;
&lt;li&gt;Interoperability&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to notice that in practice a system architecture is almost never obtained from a single style. Given that, a software architect needs to understand the &lt;em&gt;relationships&lt;/em&gt; between styles, what requires knowing the project &lt;strong&gt;attributes&lt;/strong&gt;, &lt;strong&gt;non-functional requirements&lt;/strong&gt; as well as requires an &lt;strong&gt;architectural analysis&lt;/strong&gt; process, anwering questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which is the architectural style &lt;strong&gt;topology&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How does the &lt;strong&gt;data transfer&lt;/strong&gt; and / or &lt;strong&gt;control&lt;/strong&gt; occurs between components?&lt;/li&gt;
&lt;li&gt;Which type of components and &lt;strong&gt;connectors&lt;/strong&gt; are used on this style?&lt;/li&gt;
&lt;li&gt;How is the control shared between components?&lt;/li&gt;
&lt;li&gt;Is there some interaction between data and control?&lt;/li&gt;
&lt;li&gt;Has the type of analysis have any influence on the style?&lt;/li&gt;
&lt;li&gt;Does the components interact &lt;strong&gt;synchronously&lt;/strong&gt; or &lt;strong&gt;asynchronously&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the main aspects of an architectural project is the use of system &lt;strong&gt;organization patterns&lt;/strong&gt;. Many of this patterns, also called &lt;strong&gt;architectural styles&lt;/strong&gt;, have been developed across the time once software engineers recognized the value of organization and structure principles for certain categories of software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architecture oriented development</title>
   <link href="http://jjcorrea.github.io/2014/11/03/architecture-oriented-development/"/>
   <updated>2014-11-03T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/03/architecture-oriented-development</id>
   <content type="html">&lt;p&gt;Aproximately 50 years ago, software consisted on a tiny part of the overall technological landscape, in which the hardware (electronic components, circuits, etc) was the most important player.&lt;/p&gt;

&lt;p&gt;On the other hand, once software became significantly more important to computational systems, and once it started getting more popular, also being part of major of personal and professional activities ubiquitously, the &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt; of those systems urged for better solutions than the existing &lt;strong&gt;abstraction&lt;/strong&gt; techniques which remained until the end of the 80s, as abstract data types (ADTs), high level programming languages, and modular decomposition techniques.&lt;/p&gt;

&lt;p&gt;Notice &lt;strong&gt;abstraction&lt;/strong&gt; as a way to deal with the complexity of problems and systems. As human beings we are regularly rebuilding an existing pattern in a different context, so the abstration essence is to &lt;em&gt;recognize a pattern&lt;/em&gt;, give it a &lt;em&gt;name&lt;/em&gt;, define its &lt;em&gt;usage&lt;/em&gt; and look for consistent ways to &lt;em&gt;specify&lt;/em&gt; it.&lt;/p&gt;

&lt;h2&gt;Technologial evolution&lt;/h2&gt;

&lt;p&gt;After the first completely electronic general purpose computer (ENIAC) was created at the University of Pensilvania, between 1942 and 1945, until the 60s there was a very limited software production, and the size of them was small at all.&lt;/p&gt;

&lt;p&gt;However, little by little, software has become a key technology for handling from the simpler applications to the most complex businesses. The technology industy started being one of the most competitive businesses in the world, and the &amp;quot;Software&amp;quot; component became a prevailing force in terms of &lt;strong&gt;technological innovation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Despite the importance of this news technology had at that moment, there were no &lt;strong&gt;tools&lt;/strong&gt; supporting software development, and little is known about its &lt;strong&gt;development process&lt;/strong&gt;. On the same time, the role of &lt;strong&gt;maintenance&lt;/strong&gt; began to stand out.&lt;/p&gt;

&lt;p&gt;All this factors contributed to the emmergence of the &lt;strong&gt;software engineering&lt;/strong&gt;, term coined in a seminal NATO conference which happened in 1968.&lt;/p&gt;

&lt;h2&gt;Software Engineering&lt;/h2&gt;

&lt;p&gt;The central idea in software engineering is to take advantage of engineering &lt;strong&gt;principles&lt;/strong&gt; to produce, with low cost, software which runs &lt;strong&gt;correctly&lt;/strong&gt; and &lt;strong&gt;efficiently&lt;/strong&gt; on the equipments in which they are installed. So once software started having more space, many &lt;strong&gt;software engineering paradigms&lt;/strong&gt; arised. &lt;/p&gt;

&lt;h2&gt;The Software systems nature&lt;/h2&gt;

&lt;p&gt;What makes a system well architected? Someone could say it is when the system does what the user expects. However a more general quality evaluation requires the identification of the well architected software attributes. There are two important attributes in particular that deserves our attention: &lt;strong&gt;reliability&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An appropriate level of &lt;strong&gt;reliability&lt;/strong&gt; is essential to a software system, independent of its usage. The reliability is an important attribute of software &lt;strong&gt;quality&lt;/strong&gt;, implying that the application will perform its functions as expected.&lt;/p&gt;

&lt;p&gt;In this context, &lt;strong&gt;maintainability&lt;/strong&gt; has two different aspects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need of repair: Implementaion defects which require fixes.&lt;/li&gt;
&lt;li&gt;Need of evolution: New requirements satisfaction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Software architecture&lt;/h2&gt;

&lt;p&gt;Given the growth in terms of &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt;, the development problems started exceeding the &lt;strong&gt;data structures&lt;/strong&gt; and &lt;strong&gt;algorithms&lt;/strong&gt;... design the global system structure raises as a new problem, in other words, software development oriented to the architecture.&lt;/p&gt;

&lt;p&gt;The architectural software development comprehends structural issues as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project &lt;strong&gt;alternatives&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; &amp;amp; &lt;strong&gt;scalability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Organization and general &lt;strong&gt;control structure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Communication &lt;strong&gt;protocols&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Project &lt;strong&gt;components functionality&lt;/strong&gt; assignment &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to be able to recognize common used structures, and also understand the existing architectures, what helps the engineers to make better decisions about the project alternatives. &lt;/p&gt;

&lt;p&gt;Software architecture is the study of the global organization of sofware systems, as well as its subsystems &amp;amp; components relationships. It explores &lt;strong&gt;notations&lt;/strong&gt;, &lt;strong&gt;tools&lt;/strong&gt; and &lt;strong&gt;analysis&lt;/strong&gt; techniques and components &lt;strong&gt;reuse&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The need of the software architecture role&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Act as an structure which enables attending the system requirements&lt;/li&gt;
&lt;li&gt;Serve as the base for consistency and dependeny analysis&lt;/li&gt;
&lt;li&gt;Support reuse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
To be continued...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gatling</title>
   <link href="http://jjcorrea.github.io/2014/10/19/gatling/"/>
   <updated>2014-10-19T01:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/10/19/gatling</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.0.0-M3a&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stress testing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Kibana</title>
   <link href="http://jjcorrea.github.io/2014/08/31/kibana/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/kibana</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;3.1.0&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visualize logs and time-stamped data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Charts&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Aggregation&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Monitoring&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real-time&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;No code required&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Easy setup&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Flume / FluentD Integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;UX&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Few documentation&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Query + Filtering ?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lucene powered queries through ElasticSearch&lt;/li&gt;
&lt;li&gt;Nice sample dashboards&lt;/li&gt;
&lt;li&gt;Really cool graph facets&lt;/li&gt;
&lt;li&gt;Flexible graph configuration (multiple aggregation formulas &amp;amp; options)&lt;/li&gt;
&lt;li&gt;Interesting configurable dashboard grid, but row management &amp;amp; alignment is poor&lt;/li&gt;
&lt;li&gt;Dynamic dashboard (Auto-refresh) &amp;amp; Interval&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ELK Platform</title>
   <link href="http://jjcorrea.github.io/2014/08/31/elk-platform/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/elk-platform</id>
   <content type="html">&lt;p&gt;By combining the massively popular &lt;strong&gt;E&lt;/strong&gt;lasticsearch, &lt;strong&gt;L&lt;/strong&gt;ogstash and &lt;strong&gt;K&lt;/strong&gt;ibana (&lt;a target=&quot;_blank&quot; href=&quot;http://www.elasticsearch.org/overview/&quot;&gt;ELK platform overview&lt;/a&gt;) we have created an end-to-end stack that delivers actionable insights in real-time from almost any type of structured and unstructured data source. &lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analize&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real time&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/joelcorrea/elk-stack-for-application-events-monitoring/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Dive in&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/24/elastic-search/&quot;&gt;Elastic Search Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/25/logstash/&quot;&gt;Logstash Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/31/kibana/&quot;&gt;Kibana Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Logstash</title>
   <link href="http://jjcorrea.github.io/2014/08/25/logstash/"/>
   <updated>2014-08-25T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/25/logstash</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.4.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A tool for managing events and logs. &lt;/p&gt;

&lt;p&gt;You can use it to collect logs, parse them, and store them for later use (like, for searching). Speaking of searching, logstash comes with a web interface for searching and drilling into all of your logs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;BigData&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Filter&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Extensible&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;SOC&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;ELK stack integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;JRuby&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Poor documentation&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Transform, and process logs to and from anywhere &lt;/li&gt;
&lt;li&gt;Provide search and analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Inputs, Filters and Outputs (Plugins)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Input&lt;/em&gt;: Stream source&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Filter&lt;/em&gt;: Extracts what you are interested from the stream.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Output&lt;/em&gt;: Sends the extracted stuff somewhere.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Codec&lt;/em&gt;: Decode (via inputs) and Encode (via outputs) a message&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;Simplest configuration example&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }
output { stdout {} }
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; ./logstash agent -f my.conf
&gt; 1
2014-08-26T02:42:21.416+0000 joelcorrea.local 1
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Using codecs&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }

output {
  stdout { codec =&gt; json }
}
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; 1
{&quot;message&quot;:&quot;1&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:44:29.809Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;}
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Grok: A collection of pre-defined patterns &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elasticsearch/logstash/tree/master/patterns/grok-patterns&quot;&gt;Have a look on them&lt;/a&gt; (&lt;a href=&quot;https://grokdebug.herokuapp.com/&quot;&gt;You can debug it&lt;/a&gt;)
&lt;pre class=&quot;message&quot;&gt;
input {
  stdin {}
}
filter {
  grok { 
    match =&amp;gt; [ &amp;quot;message&amp;quot;, &amp;quot;name: %{WORD:custom&lt;em&gt;name}&amp;quot; ] 
  }
  mutate { lowercase =&amp;gt; [ &amp;quot;custom&lt;/em&gt;name&amp;quot; ]
}
output {
    stdout{codec =&amp;gt; json}
}
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; name: Joel
{&quot;message&quot;:&quot;name: Joel&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:56:57.461Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;,&quot;custom_name&quot;:&quot;joel&quot;}
&lt;/pre&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://writequit.org/articles/logstash-intro.html&quot;&gt;Logstash Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;Logstash 1.4.2 Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michael.bouvy.net/blog/en/2013/11/19/collect-visualize-your-logs-logstash-elasticsearch-redis-kibana/&quot;&gt;Collect &amp;amp; visualize your logs with Logstash, Elasticsearch &amp;amp; Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Elastic Search</title>
   <link href="http://jjcorrea.github.io/2014/08/24/elastic-search/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/elastic-search</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.3.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Search, analyze in real-time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CouchBase</title>
   <link href="http://jjcorrea.github.io/2014/08/24/couch-base/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/couch-base</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.5.1&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;World&amp;#39;s most complete, most scalable and best performing NoSQL database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Performance&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Availability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Builtin Cache&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Auto-sharding&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Incremental Map-Reduce&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Monitoring UI&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Geographic strength&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Multiple Connectors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-warning&quot;&gt;Key-Value&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;Document based&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-danger&quot;&gt;No HTTP API&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Data / NoSQL Reference</title>
   <link href="http://jjcorrea.github.io/2014/08/24/big-data-nosql/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/big-data-nosql</id>
   <content type="html">&lt;h3&gt;Challenges&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Compression&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Statistics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Storage&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analysis&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Transport&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Auto-sharding â A NoSQL database automatically spreads data across servers, without requiring applications to participate. Servers can be added or removed from the data layer without application downtime, with data (and I/O) automatically spread across the servers. Most NoSQL databases also support data replication, storing multiple copies of data across the cluster, and even across data centers, to ensure high availability and support disaster recovery. A properly managed NoSQL database system should never need to be taken offline, for any reason, supporting 24x365 continuous operation of applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distributed query support â âShardingâ a relational database can reduce, or eliminate in certain cases, the ability to perform complex data queries. NoSQL database systems retain their full query expressive power even when distributed across hundreds of servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrated caching â To reduce latency and increase sustained data throughput, advanced NoSQL database technologies transparently cache data in system memory. This behavior is transparent to the application developer and the operations team, compared to relational technology where a caching tier is usually a separate infrastructure tier that must be developed to, deployed on separate servers, and explicitly managed by the ops team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;References &amp;amp; Related stuff&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.edureka.co/about-big-data-and-hadoop&quot;&gt;Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Q76-fCqVjhU&quot;&gt;Spark &amp;amp; Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtojboss.com/2013/09/04/ampd-for-hadoop-alternatives/&quot;&gt;Hadoop alternatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Spark</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-spark/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-spark</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.0.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An open-source clustered data analytics framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Analytics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Batch processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Stream processing (Real time)&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Mesos</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-mesos/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-mesos</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;0.19&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Develop and run resource-efficient distributed systems&lt;/p&gt;

&lt;p&gt;A cluster manager that simplifies the complexity of running applications on a shared pool of servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Cluster management&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Pool&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fault-tolerant replicated master using ZooKeeper&lt;/li&gt;
&lt;li&gt;Scalability to 10,000s of nodes&lt;/li&gt;
&lt;li&gt;Isolation between tasks with Linux Containers&lt;/li&gt;
&lt;li&gt;Multi-resource scheduling (memory and CPU aware)&lt;/li&gt;
&lt;li&gt;Java, Python and C++ APIs for developing new parallel applications&lt;/li&gt;
&lt;li&gt;Web UI for viewing cluster state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Who is using&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://ebay.com&quot;&gt;eBay&lt;/a&gt;, &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;, &lt;a href=&quot;http://paypal.com&quot;&gt;PayPal&lt;/a&gt;, &lt;a href=&quot;http://airbnb.com&quot;&gt;Airbnb&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Giving a try&lt;/h3&gt;

&lt;div class=&quot;message&quot;&gt;...&lt;/div&gt;
</content>
 </entry>
 

</feed>
