<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Joel CorrÃªa</title>
 <link href="http://jjcorrea.github.io/atom.xml" rel="self"/>
 <link href="http://jjcorrea.github.io/"/>
 <updated>2014-12-06T21:02:51-02:00</updated>
 <id>http://jjcorrea.github.io</id>
 <author>
   <name>Joel Correa</name>
   <email></email>
 </author>

 
 <entry>
   <title>Spring 4</title>
   <link href="http://jjcorrea.github.io/2014/12/06/spring-4/"/>
   <updated>2014-12-06T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/12/06/spring-4</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;The Spring Framework was first released in 2004; since then there have been significant major revisions: Spring 2.0 provided XML namespaces and AspectJ support; Spring 2.5 embraced annotation-driven configuration; Spring 3.0 introduced a strong Java 5+ foundation across the framework codebase, and features such as the Java-based @Configuration model.&lt;/p&gt;

&lt;p&gt;Version 4.0 is the latest major release of the Spring Framework and the first to fully support Java 8 features. You can still use Spring with older versions of Java, however, the minimum requirement has now been raised to Java SE 6. We have also taken the opportunity of a major release to remove many deprecated classes and methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Removed deprecated stuff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/3.2.4.RELEASE_to_4.0.0.RELEASE/&quot;&gt;Details&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Java 8 support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Support for &lt;strong&gt;lambda expressions&lt;/strong&gt; &amp;amp; &lt;strong&gt;method references&lt;/strong&gt; with Spring callback interfaces.&lt;/li&gt;
&lt;li&gt;First class support to &lt;strong&gt;java.time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Compatibility with Java 6 &amp;amp; 7 maintained.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Groovy Bean Definition DSL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bean configuration using Groovy DSL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;def reader = new GroovyBeanDefinitionReader(myApplicationContext)
reader.beans {
    dataSource(BasicDataSource) {
        driverClassName = &amp;quot;org.hsqldb.jdbcDriver&amp;quot;
        url = &amp;quot;jdbc:hsqldb:mem:grailsDB&amp;quot;
        username = &amp;quot;sa&amp;quot;
        password = &amp;quot;&amp;quot;
        settings = [mynew:&amp;quot;setting&amp;quot;]
    }
    sessionFactory(SessionFactory) {
        dataSource = dataSource
    }
    myService(MyService) {
        nestedBean = { AnotherBean bean -&amp;gt;
            dataSource = dataSource
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Container improvements&lt;/h2&gt;

&lt;p&gt;TODO...&lt;/p&gt;

&lt;h2&gt;Web improvements&lt;/h2&gt;

&lt;p&gt;TODO...&lt;/p&gt;

&lt;h2&gt;WebSocket, SockJS, and STOMP Messaging&lt;/h2&gt;

&lt;p&gt;TODO...&lt;/p&gt;

&lt;h2&gt;Testing Improvements&lt;/h2&gt;

&lt;p&gt;TODO... &lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;p&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architectural requirements</title>
   <link href="http://jjcorrea.github.io/2014/11/30/architectural-requirements/"/>
   <updated>2014-11-30T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/30/architectural-requirements</id>
   <content type="html">&lt;p&gt;Generally the set of system requirements are defined during the initial steps of the development cycle. It should be seen as the &lt;strong&gt;specification&lt;/strong&gt; of what needs to be implemented. The requirements are descriptions of how the system should &lt;strong&gt;behave&lt;/strong&gt;, contains &lt;strong&gt;domain information&lt;/strong&gt; and &lt;strong&gt;restrictions&lt;/strong&gt; about the system operation.&lt;/p&gt;

&lt;p&gt;During the requirement elucidation phase the software architect / engineer tries to identify the system&amp;#39;m specificities which needs to be supported. Once the set of requirements is obtained, it is then posssible to start the architectural project.&lt;/p&gt;

&lt;p&gt;The software development process based on the architecture puts the architecture as a &lt;strong&gt;guidance&lt;/strong&gt;, as the &lt;strong&gt;orientation&lt;/strong&gt; factor of the process, so we can also say that in an architecture oriented development the requirements are part of the main aspects of the development process.&lt;/p&gt;

&lt;p&gt;The system &lt;strong&gt;complexity&lt;/strong&gt; can be determined by its &lt;strong&gt;functional requirements&lt;/strong&gt; - what it does - and by its &lt;strong&gt;quality / non-functional requirements&lt;/strong&gt; - how it does. The distinction can be done using the following definitions:&lt;/p&gt;

&lt;h2&gt;Functional requirement&lt;/h2&gt;

&lt;p&gt;A software requirement which specifies a &lt;strong&gt;funcionality&lt;/strong&gt; that the system or a software component needs to be able to perform. This requirements define the system &lt;strong&gt;behavior&lt;/strong&gt;, in other words, the transformation process that software or hardware components do on the inputs to generate the outputs (Thayer, 1990).&lt;/p&gt;

&lt;h2&gt;Quality / Non-functional requirement&lt;/h2&gt;

&lt;p&gt;Describes &lt;strong&gt;how&lt;/strong&gt; the software performs its tasks, not what it does. Thus, there are the &lt;em&gt;performance&lt;/em&gt; requirements, &lt;em&gt;restrictions&lt;/em&gt; and software &lt;em&gt;quality&lt;/em&gt; attributes. Non-functional requirements are difficult to test, then they are normally evaluated subjectively (Thayer, 1990).&lt;/p&gt;

&lt;h2&gt;Project attributes&lt;/h2&gt;

&lt;p&gt;There are several &lt;strong&gt;principles&lt;/strong&gt; which guide the software development process, focused on obtaining a final product which satisfies the identified requirements during the process. They are called project attributes.&lt;/p&gt;

&lt;h3&gt;Separation of concerns (SOC)&lt;/h3&gt;

&lt;p&gt;The separation of concerns allows to deal ith &lt;em&gt;different aspects of a problem&lt;/em&gt; focusing in each of them &lt;strong&gt;isolatedly&lt;/strong&gt;. This idea can be applied in order to deal with inherent complexity. The separation of concerns has been applied when a system is &lt;strong&gt;decomposed&lt;/strong&gt; in several modules, with the architecture containing more than one component. &lt;/p&gt;

&lt;p&gt;In this case it allows to separate or isolate part of the system functionality, but how can we determine &lt;em&gt;which part of the system should be separated&lt;/em&gt;? The interest to isolate specific components and its functionalities comes from the target to provide support to a set of quality requirements. So, doing a separation in terms of the system quality requirements is essential to support them appropriately. &lt;/p&gt;

&lt;h3&gt;Abstraction&lt;/h3&gt;

&lt;p&gt;One of the main ways to deal with complexity. It is, in fact, a process in which we can &lt;em&gt;identify the important aspects of some phenomenon and ignore its details&lt;/em&gt;. Abstraction can also be seen as a special case of SOC, where we separate the important aspects concern of the non-important details. By doing so, the engineers can concentrate in what they judge relevant and ignore the details.&lt;/p&gt;

&lt;h3&gt;Modularization&lt;/h3&gt;

&lt;p&gt;When software engineers face a big / complex system they generally divide them into smaller pieces or &lt;strong&gt;modules&lt;/strong&gt; A system composed by a set of modules is called &lt;strong&gt;modular&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One of the main benefits of this attribute is that it allows SOC being applied in two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When dealing with each module details isolatedly, and then ignoring other modules details&lt;/li&gt;
&lt;li&gt;When dealing with general characteristics of all modules, and the existing relations between them, enabling integrating them into a system. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are three targets that modularization tries to obtain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decompose&lt;/strong&gt; a big / complex system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compose&lt;/strong&gt; a system using a set of modules&lt;/li&gt;
&lt;li&gt;Understand the system modularization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its important to notice that a modular system implies in modules with a high level of &lt;strong&gt;cohesion&lt;/strong&gt; and low level of &lt;strong&gt;coupling&lt;/strong&gt;, what allows to consider the modules as black boxes.&lt;/p&gt;

&lt;h3&gt;Resources sharing&lt;/h3&gt;

&lt;p&gt;In modular systems, the components should have a low level of coupling ideally, as it can become difficult to analyze, comprehend, change, test and even reuse highly coupled systems. However, it still possible to have low coupled components even when sharing resources. The resources can be &lt;em&gt;data or services&lt;/em&gt; which are shared across several &lt;strong&gt;independent&lt;/strong&gt; components. &lt;/p&gt;

&lt;p&gt;Notice that sharing resources normally implies in increasing the &lt;strong&gt;integration&lt;/strong&gt; and &lt;strong&gt;portability&lt;/strong&gt; of systems.&lt;/p&gt;

&lt;h2&gt;Non-functional requirements&lt;/h2&gt;

&lt;p&gt;Non-functional requirements have a main role during the system development, they may be used as selection criteria for project alternatives, architectural style and implementation method.
Disregard, of not consider this requirements properly is &lt;strong&gt;admittedly expensive&lt;/strong&gt; and makes it difficult to correct once the system has been implemented (Brooks, 1987).&lt;/p&gt;

&lt;p&gt;Consider the &lt;a href=&quot;http://www.utdallas.edu/%7Echung/RE/IEEE830-1993.pdf&quot;&gt;IEEE-Std 830-1993&lt;/a&gt; (IEEE, 1993) standard. It lists a set of 13 non-functional requirements to be considered in software requirement specification. This pattern includes &lt;strong&gt;performance&lt;/strong&gt; requirements, &lt;strong&gt;reliability&lt;/strong&gt;, &lt;strong&gt;portability&lt;/strong&gt; &amp;amp; &lt;strong&gt;security&lt;/strong&gt;, similarly to another classification presented by Boehm, who looked to list a set of, what he nominated, quality requirements (Boehm, 1976).&lt;/p&gt;

&lt;p&gt;The following picture is an adaptation of Sommerville classification (Sommervile, 1992) summarizes a set of quality requirements important to consider:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/non-functional-requirements.png&quot; alt=&quot;Non-functional requirements&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Usability&lt;/h3&gt;

&lt;p&gt;A quality requirement  of any &lt;strong&gt;interactive&lt;/strong&gt; system. Usability notion comes from the fact that any system designed to be used by people should be easy to &lt;strong&gt;learn&lt;/strong&gt; and &lt;strong&gt;use&lt;/strong&gt;, making it easier and enjoyable to perform any task.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease to learn: Associated to the time and minimal efford required to reach a given level of performance using the system.&lt;/li&gt;
&lt;li&gt;Ease to use: Related to the task execution speed and reduction of errors while using a system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some relevant usability metrics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Time spent performing a task&lt;/li&gt;
&lt;li&gt;Task completion percentage&lt;/li&gt;
&lt;li&gt;Task completion percentage by time unit&lt;/li&gt;
&lt;li&gt;Success / failure rates&lt;/li&gt;
&lt;li&gt;Time consumed by errors&lt;/li&gt;
&lt;li&gt;Error percentage&lt;/li&gt;
&lt;li&gt;Number of commands used&lt;/li&gt;
&lt;li&gt;Number of commands available not used&lt;/li&gt;
&lt;li&gt;&amp;#39;Help&amp;#39; usage frequency&lt;/li&gt;
&lt;li&gt;Number of times the user expresses he&amp;#39;s satisfaction or frustation&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Maintainability&lt;/h3&gt;

&lt;p&gt;A quality requirement normally applied when refering to changes done after the system is available to use. It is a wide term, involving &lt;strong&gt;repair&lt;/strong&gt; (of some existing error), as &lt;strong&gt;change / evolution&lt;/strong&gt; activities.&lt;/p&gt;

&lt;p&gt;The ease of change, adding or modifying some functionality, depends directly on the system architecture. Its important to notice that the architecture define the components and their connections, then also defines under which circumstances they can be changed.&lt;/p&gt;

&lt;h3&gt;Reliability&lt;/h3&gt;

&lt;p&gt;Software reliability is a property of a software not causing a failure during a certain amount of time, under specific conditions. The reliability is generally defined on &lt;strong&gt;statistical behavior&lt;/strong&gt;, it is the probability that a software &lt;em&gt;will operate as expected&lt;/em&gt; during a known interval.&lt;/p&gt;

&lt;p&gt;Some of the metrics used to evaluate software reliability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Its a metric of how available the system would be, in other words, how much available the system would be to perform a task requested by some user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure rate&lt;/strong&gt;: A metric for calculating the &lt;em&gt;frequency in which the system fails&lt;/em&gt; in performing a task requested by a user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure probability&lt;/strong&gt; during operational phase: Metric of the probability that a system will behave in an unexpected way while operating.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Mean_time_between_failures#MTTF_and_MTTFd_calculation&quot;&gt;Mean time to failure (MTTF)&lt;/a&gt;: Metric of time between observable failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Another important quality attribute for software systems. Given the impact it can cause, the performance requirements in the most important quality requirements. Furthermore, performance is important because it affects the system &lt;strong&gt;usability&lt;/strong&gt;, impacting then the users &lt;strong&gt;productivity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The performance requirement restricts the speed of operation of a software system. This can be seen, for example, in terms of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Response requirements&lt;/strong&gt;: Indicates a acceptable response time for system users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throughput requirements&lt;/strong&gt;: Indicates the amount of data that should be processed in a certain time period.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Reuse&lt;/h3&gt;

&lt;p&gt;One of the characteristics of engineering is to make use of existing projects to minimize the efford of new projects. On this way, components which have been already developed and tested could be reused. &lt;/p&gt;

&lt;p&gt;The reuse can be seen on different perspectives. It can be component oriented, process oriented or domain specific. There can be also requirements reuse. About component reuse, it can happen in some of the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: All application could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subsystems&lt;/strong&gt;: The main subsystems of an application could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objects or modules&lt;/strong&gt;: System components, containing a set of functions, could be reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Components which implement a single function could be reused.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;This post basically walked through a generic process of architectural requirements analysis. The outcome of this process is a set of &lt;strong&gt;functional requirements&lt;/strong&gt;, supported by &lt;strong&gt;use cases&lt;/strong&gt;, a list of &lt;strong&gt;architectural requirements&lt;/strong&gt;, &lt;strong&gt;project attributes&lt;/strong&gt; and &lt;strong&gt;quality (non-functional)&lt;/strong&gt; requirements, which indicate &lt;strong&gt;how&lt;/strong&gt; the system will behave under different &lt;strong&gt;quality scenarios&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architectural styles</title>
   <link href="http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles/"/>
   <updated>2014-11-08T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/08/architecture-oriented-development-architectural-styles</id>
   <content type="html">&lt;p&gt;Given the importance, and the growing need of dealing with &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt; targets, through software architecture techniques (as exposed on the &lt;a href=&quot;/2014/11/03/architecture-oriented-development/&quot;&gt;previous post&lt;/a&gt;), there are categorizations of architectural styles which supports the required characteristics of software systems. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;architectural styles&lt;/strong&gt; use clear &lt;strong&gt;terminologies&lt;/strong&gt;, &lt;strong&gt;properties&lt;/strong&gt; and &lt;strong&gt;restrictions&lt;/strong&gt; to identify the components (a.k.a subsystems) and interaction mechanisms between them, what is specially usefull for software engineers to &lt;strong&gt;reuse&lt;/strong&gt; the architectural patterns on scenarios in which they are needed. &lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;style&lt;/strong&gt; supports a set of &lt;strong&gt;non-functional requirements&lt;/strong&gt; and &lt;strong&gt;project attributes&lt;/strong&gt; what makes possible distinguish between different architectures.&lt;/p&gt;

&lt;h2&gt;#1 Pipes and filters&lt;/h2&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data flow which goes from an edge (&lt;strong&gt;origin&lt;/strong&gt;) to another (&lt;strong&gt;destination&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Data is processed and transformed on &lt;strong&gt;filters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unidirectional&lt;/strong&gt; flow = Operations chaining&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of pipes and filters would be the following UNIX command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sample&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;who &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of &lt;em&gt;who&lt;/em&gt; is a list of currently connected users, and its output is used as the input of &lt;em&gt;sort&lt;/em&gt;, which orders the values alphabetically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-pipe-and-filter.png&quot; alt=&quot;Unix who | sort&quot;&gt;&lt;/p&gt;

&lt;p&gt;The two programs, &lt;em&gt;who&lt;/em&gt; and &lt;em&gt;sort&lt;/em&gt; are &lt;strong&gt;components&lt;/strong&gt; called &lt;strong&gt;filters&lt;/strong&gt;. Notice that the filters can start putting the transformation outcome on the pipes &lt;em&gt;before all the input data is processed&lt;/em&gt;, and that the sort output could lead to another filter represented on the picture by the dotted box.&lt;/p&gt;

&lt;p&gt;Another example of pipes &amp;amp; filters architectural style can be found at the classical &lt;em&gt;compilers&lt;/em&gt; model. The first compilers used to work in two steps: &lt;em&gt;source language analysis&lt;/em&gt; and &lt;em&gt;code synthesis&lt;/em&gt; (Aho, 1987). With the hardware evolution, the need of &lt;strong&gt;portability&lt;/strong&gt; started raising, and the classical model needed to be enhanced to a new process, composed by 3-legged analysis (lexical, syntactic &amp;amp; semantic analysis), and 2-step synthesis (optimization &amp;amp; generation).&lt;/p&gt;

&lt;p&gt;It is worth to comment that this architectural style is normally &lt;strong&gt;flexible&lt;/strong&gt;, enabling the pipes and filters reorganization. Although this style provides &lt;em&gt;maintainability&lt;/em&gt; support in terms of easy reorganization, it is clear that frequent changes on a component (filter) can impact the other components, so maintainability support is limited on this style.&lt;/p&gt;

&lt;h2&gt;#2 Layers&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;layered&lt;/strong&gt; architectural style structures a system into a set of layers, where each of them groups a set of &lt;em&gt;tasks&lt;/em&gt; in a certain level of &lt;em&gt;abstraction&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In a layered architecture, a layer on the N level normally offers a set of functionalities to the above level (N + 1). N uses its functions as well as it uses the functionality provided by the below layer (n - 1). &lt;/p&gt;

&lt;p&gt;A variation of this style could enable the N layer to access N-2, N-3 and so on, but notice that doing so the system &lt;strong&gt;maintainability can be affected&lt;/strong&gt;. Having a bigger dependency level between layers imply on more layers to be changed once having a new requirement or change. &lt;/p&gt;

&lt;p&gt;A good example of this style is the &lt;strong&gt;OSI&lt;/strong&gt; (Open Systems Interconnection) reference model (Tanenbaum, 1988). On this model each &lt;em&gt;layer&lt;/em&gt; can be seen as a &lt;em&gt;component&lt;/em&gt; which can be implemented by software or hardware. It is composed by 7 layers and serves as the computer network protocol architecture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7. Application&lt;/li&gt;
&lt;li&gt;6. Presentation&lt;/li&gt;
&lt;li&gt;5. Session&lt;/li&gt;
&lt;li&gt;4. Transport&lt;/li&gt;
&lt;li&gt;3. Network&lt;/li&gt;
&lt;li&gt;2. Data link&lt;/li&gt;
&lt;li&gt;1. Physical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact a layered architecture gives a higher level of &lt;em&gt;flexibility&lt;/em&gt;, however this has an associate &lt;strong&gt;cost&lt;/strong&gt; on the system &lt;strong&gt;performance&lt;/strong&gt;, as an external request needs to pass through many layers in order to be handled. Anyway, implementing a &lt;strong&gt;monolithic&lt;/strong&gt; system / protocol isn&amp;#39;t an appropriate solution as well.&lt;/p&gt;

&lt;h2&gt;#3 Implicit invocation (Event driven)&lt;/h2&gt;

&lt;p&gt;Differently than the architectural style based on objects, on which one object (component) invokes the other directly through message passing, the implicit invocation style requires the components interested on an &lt;strong&gt;event&lt;/strong&gt; &lt;em&gt;registering&lt;/em&gt; themselves in order to receive it. In this case, the system provides a mechanism for forwarding the events to the registered components.&lt;/p&gt;

&lt;h2&gt;#4 Blackboard&lt;/h2&gt;

&lt;p&gt;The blackboard architectural style emerged on artificial intelligence field, in which it was used as a mechanism for sharing the knowlege (data) between many intelligent components. This style considers the existence of a main data &lt;strong&gt;repository&lt;/strong&gt; surrounded by a set of components called knowlege sources (KSs).&lt;/p&gt;

&lt;p&gt;The blackboard architectural style is based on a sproblem solving model which provides a conceptual structure for organizing the domain knowlege as well as a strategy to apply that knowlege.&lt;/p&gt;

&lt;p&gt;The style consists on 3 basic components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Knowlege sources&lt;/strong&gt;: The knowlege needed for solving a problem is partitioned in knowlege sources. Each source is &lt;strong&gt;separated&lt;/strong&gt; and &lt;strong&gt;independant&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blackboard data structure&lt;/strong&gt;: The problem solving data is maintained in a &lt;strong&gt;shared database&lt;/strong&gt;, called blackboard. The knowlege sources causes modifications on the blackboard, what triggers changes until having a final &lt;strong&gt;solution&lt;/strong&gt;. All interactions and communication between sources occurs only though this blackboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control&lt;/strong&gt;: The knowlege sources &lt;strong&gt;reacts&lt;/strong&gt; to changes on the blackboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-blackboard.png&quot; alt=&quot;Blackboard organization&quot;&gt;&lt;/p&gt;

&lt;p&gt;This architectural style is recommented on applications where several types of knowlege should be considered in order to interpret a set of initial data. It was tipically used on cases where there was &lt;em&gt;no general solution&lt;/em&gt; for a problem. One or more components (KSs) interacts with the shared database (blackboard) looking for a &lt;strong&gt;partial&lt;/strong&gt; or &lt;strong&gt;total&lt;/strong&gt; solution for the problem (in the case of a &lt;em&gt;partial solution&lt;/em&gt;, another component can be activated then).&lt;/p&gt;

&lt;h2&gt;#5 Distributed systems&lt;/h2&gt;

&lt;p&gt;There are several architectural models in which regards distributed systems. We are going to see two of the most common styles: &lt;strong&gt;Multiprocessor&lt;/strong&gt; and &lt;strong&gt;multicomputer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;multiprocessor&lt;/strong&gt; architecture comprehends many processors &lt;em&gt;sharing&lt;/em&gt; a primary memory. This style is appropriate to &lt;em&gt;execute several subtasks simultaneously&lt;/em&gt; in a &lt;em&gt;same program&lt;/em&gt;. On the other hand, a &lt;strong&gt;multicomputer&lt;/strong&gt; architecture is similar to multiprocessors, except that the processors &lt;em&gt;doesn&amp;#39;t share memory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arch-styles-distributed.png&quot; alt=&quot;Distributed system&quot;&gt;&lt;/p&gt;

&lt;p&gt;The distributed system consists on &lt;em&gt;multiple processors&lt;/em&gt; which uses message passing mechanisms to communicate to each other. In other words, a distributed application can be seen as a concurrent program in which the processes communicate through message passing. Consists on four (4) types of processes (components):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;: A data &lt;em&gt;transformer&lt;/em&gt;. Receives a data flow as input, runs computations and put the outcomes on the output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: Can be seen as a &lt;em&gt;process&lt;/em&gt;. In a client-server interaction, a &lt;em&gt;client&lt;/em&gt; is a component which starts some activity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: Different than a client, a &lt;em&gt;server&lt;/em&gt; waits for client requests to handle them. In other words, a server is a &lt;strong&gt;reactive&lt;/strong&gt; process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer&lt;/strong&gt;: One in a set of identical processes which interacts to offer some service or perform some parallel computation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;#6 Communicating processes&lt;/h2&gt;

&lt;p&gt;Fits in the set of distributed application architectures. The communicating processes style is used when the priority goals of the system are &lt;strong&gt;scalability&lt;/strong&gt; and &lt;strong&gt;ease of change&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example is a system in which there is a set replicated of &lt;strong&gt;workers&lt;/strong&gt; (computational components) which share a single task repository. Different than descentralized servers which holds multiple &lt;em&gt;copies of data&lt;/em&gt;, this style provides several &lt;em&gt;copies of the components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This style is used in parallel systems when dealing with the &lt;a href=&quot;http://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; (Single Instruction, Multiple Data) paradigm.&lt;/p&gt;

&lt;h2&gt;#7 Client-Server&lt;/h2&gt;

&lt;p&gt;Another architectural style which fits in distributed architectures is client-server. This style allows the tasks being divided between data &lt;strong&gt;producers&lt;/strong&gt; and &lt;strong&gt;consumers&lt;/strong&gt;. A &lt;em&gt;server&lt;/em&gt; is a process which waits for requests from one or more &lt;em&gt;clients&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of removing and / or adding clients, due to the processes &lt;em&gt;independence&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ease of changing &lt;em&gt;client functionalities&lt;/em&gt; given other clients are not affected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Style variations&lt;/h2&gt;

&lt;p&gt;There is a significant amount of architectural styles nowadays, and there are also variations of that styles. When presenting a style it is important to notice the system &lt;strong&gt;non-functional / quality requirements&lt;/strong&gt;, which can be for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of change&lt;/li&gt;
&lt;li&gt;Maintainability&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Fault tolerance&lt;/li&gt;
&lt;li&gt;Interoperability&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to notice that in practice a system architecture is almost never obtained from a single style. Given that, a software architect needs to understand the &lt;em&gt;relationships&lt;/em&gt; between styles, what requires knowing the project &lt;strong&gt;attributes&lt;/strong&gt;, &lt;strong&gt;non-functional requirements&lt;/strong&gt; as well as requires an &lt;strong&gt;architectural analysis&lt;/strong&gt; process, anwering questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which is the architectural style &lt;strong&gt;topology&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How does the &lt;strong&gt;data transfer&lt;/strong&gt; and / or &lt;strong&gt;control&lt;/strong&gt; occurs between components?&lt;/li&gt;
&lt;li&gt;Which type of components and &lt;strong&gt;connectors&lt;/strong&gt; are used on this style?&lt;/li&gt;
&lt;li&gt;How is the control shared between components?&lt;/li&gt;
&lt;li&gt;Is there some interaction between data and control?&lt;/li&gt;
&lt;li&gt;Has the type of analysis have any influence on the style?&lt;/li&gt;
&lt;li&gt;Does the components interact &lt;strong&gt;synchronously&lt;/strong&gt; or &lt;strong&gt;asynchronously&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the main aspects of an architectural project is the use of system &lt;strong&gt;organization patterns&lt;/strong&gt;. Many of this patterns, also called &lt;strong&gt;architectural styles&lt;/strong&gt;, have been developed across the time once software engineers recognized the value of organization and structure principles for certain categories of software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Architecture oriented development</title>
   <link href="http://jjcorrea.github.io/2014/11/03/architecture-oriented-development/"/>
   <updated>2014-11-03T00:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/11/03/architecture-oriented-development</id>
   <content type="html">&lt;p&gt;Aproximately 50 years ago, software consisted on a tiny part of the overall technological landscape, in which the hardware (electronic components, circuits, etc) was the most important player.&lt;/p&gt;

&lt;p&gt;On the other hand, once software became significantly more important to computational systems, and once it started getting more popular, also being part of major of personal and professional activities ubiquitously, the &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt; of those systems urged for better solutions than the existing &lt;strong&gt;abstraction&lt;/strong&gt; techniques which remained until the end of the 80s, as abstract data types (ADTs), high level programming languages, and modular decomposition techniques.&lt;/p&gt;

&lt;p&gt;Notice &lt;strong&gt;abstraction&lt;/strong&gt; as a way to deal with the complexity of problems and systems. As human beings we are regularly rebuilding an existing pattern in a different context, so the abstration essence is to &lt;em&gt;recognize a pattern&lt;/em&gt;, give it a &lt;em&gt;name&lt;/em&gt;, define its &lt;em&gt;usage&lt;/em&gt; and look for consistent ways to &lt;em&gt;specify&lt;/em&gt; it.&lt;/p&gt;

&lt;h2&gt;Technologial evolution&lt;/h2&gt;

&lt;p&gt;After the first completely electronic general purpose computer (ENIAC) was created at the University of Pensilvania, between 1942 and 1945, until the 60s there was a very limited software production, and the size of them was small at all.&lt;/p&gt;

&lt;p&gt;However, little by little, software has become a key technology for handling from the simpler applications to the most complex businesses. The technology industy started being one of the most competitive businesses in the world, and the &amp;quot;Software&amp;quot; component became a prevailing force in terms of &lt;strong&gt;technological innovation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Despite the importance of this news technology had at that moment, there were no &lt;strong&gt;tools&lt;/strong&gt; supporting software development, and little is known about its &lt;strong&gt;development process&lt;/strong&gt;. On the same time, the role of &lt;strong&gt;maintenance&lt;/strong&gt; began to stand out.&lt;/p&gt;

&lt;p&gt;All this factors contributed to the emmergence of the &lt;strong&gt;software engineering&lt;/strong&gt;, term coined in a seminal NATO conference which happened in 1968.&lt;/p&gt;

&lt;h2&gt;Software Engineering&lt;/h2&gt;

&lt;p&gt;The central idea in software engineering is to take advantage of engineering &lt;strong&gt;principles&lt;/strong&gt; to produce, with low cost, software which runs &lt;strong&gt;correctly&lt;/strong&gt; and &lt;strong&gt;efficiently&lt;/strong&gt; on the equipments in which they are installed. So once software started having more space, many &lt;strong&gt;software engineering paradigms&lt;/strong&gt; arised. &lt;/p&gt;

&lt;h2&gt;The Software systems nature&lt;/h2&gt;

&lt;p&gt;What makes a system well architected? Someone could say it is when the system does what the user expects. However a more general quality evaluation requires the identification of the well architected software attributes. There are two important attributes in particular that deserves our attention: &lt;strong&gt;reliability&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An appropriate level of &lt;strong&gt;reliability&lt;/strong&gt; is essential to a software system, independent of its usage. The reliability is an important attribute of software &lt;strong&gt;quality&lt;/strong&gt;, implying that the application will perform its functions as expected.&lt;/p&gt;

&lt;p&gt;In this context, &lt;strong&gt;maintainability&lt;/strong&gt; has two different aspects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need of repair: Implementaion defects which require fixes.&lt;/li&gt;
&lt;li&gt;Need of evolution: New requirements satisfaction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Software architecture&lt;/h2&gt;

&lt;p&gt;Given the growth in terms of &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;complexity&lt;/strong&gt;, the development problems started exceeding the &lt;strong&gt;data structures&lt;/strong&gt; and &lt;strong&gt;algorithms&lt;/strong&gt;... design the global system structure raises as a new problem, in other words, software development oriented to the architecture.&lt;/p&gt;

&lt;p&gt;The architectural software development comprehends structural issues as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project &lt;strong&gt;alternatives&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; &amp;amp; &lt;strong&gt;scalability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Organization and general &lt;strong&gt;control structure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Communication &lt;strong&gt;protocols&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Project &lt;strong&gt;components functionality&lt;/strong&gt; assignment &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to be able to recognize common used structures, and also understand the existing architectures, what helps the engineers to make better decisions about the project alternatives. &lt;/p&gt;

&lt;p&gt;Software architecture is the study of the global organization of sofware systems, as well as its subsystems &amp;amp; components relationships. It explores &lt;strong&gt;notations&lt;/strong&gt;, &lt;strong&gt;tools&lt;/strong&gt; and &lt;strong&gt;analysis&lt;/strong&gt; techniques and components &lt;strong&gt;reuse&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The need of the software architecture role&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Act as an structure which enables attending the system requirements&lt;/li&gt;
&lt;li&gt;Serve as the base for consistency and dependeny analysis&lt;/li&gt;
&lt;li&gt;Support reuse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
To be continued...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gatling</title>
   <link href="http://jjcorrea.github.io/2014/10/19/gatling/"/>
   <updated>2014-10-19T01:00:00-02:00</updated>
   <id>http://jjcorrea.github.io/2014/10/19/gatling</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.0.0-M3a&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stress testing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;...&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Kibana</title>
   <link href="http://jjcorrea.github.io/2014/08/31/kibana/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/kibana</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;3.1.0&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visualize logs and time-stamped data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Charts&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Aggregation&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Monitoring&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real-time&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;No code required&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Easy setup&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Flume / FluentD Integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;UX&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Few documentation&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Query + Filtering ?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;So, what&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lucene powered queries through ElasticSearch&lt;/li&gt;
&lt;li&gt;Nice sample dashboards&lt;/li&gt;
&lt;li&gt;Really cool graph facets&lt;/li&gt;
&lt;li&gt;Flexible graph configuration (multiple aggregation formulas &amp;amp; options)&lt;/li&gt;
&lt;li&gt;Interesting configurable dashboard grid, but row management &amp;amp; alignment is poor&lt;/li&gt;
&lt;li&gt;Dynamic dashboard (Auto-refresh) &amp;amp; Interval&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ELK Platform</title>
   <link href="http://jjcorrea.github.io/2014/08/31/elk-platform/"/>
   <updated>2014-08-31T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/31/elk-platform</id>
   <content type="html">&lt;p&gt;By combining the massively popular &lt;strong&gt;E&lt;/strong&gt;lasticsearch, &lt;strong&gt;L&lt;/strong&gt;ogstash and &lt;strong&gt;K&lt;/strong&gt;ibana (&lt;a target=&quot;_blank&quot; href=&quot;http://www.elasticsearch.org/overview/&quot;&gt;ELK platform overview&lt;/a&gt;) we have created an end-to-end stack that delivers actionable insights in real-time from almost any type of structured and unstructured data source. &lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analize&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Real time&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/joelcorrea/elk-stack-for-application-events-monitoring/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Dive in&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/24/elastic-search/&quot;&gt;Elastic Search Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/25/logstash/&quot;&gt;Logstash Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/08/31/kibana/&quot;&gt;Kibana Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Logstash</title>
   <link href="http://jjcorrea.github.io/2014/08/25/logstash/"/>
   <updated>2014-08-25T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/25/logstash</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.4.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A tool for managing events and logs. &lt;/p&gt;

&lt;p&gt;You can use it to collect logs, parse them, and store them for later use (like, for searching). Speaking of searching, logstash comes with a web interface for searching and drilling into all of your logs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Logs&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Events&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;BigData&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Filter&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Extensible&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;SOC&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;ELK stack integration&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;JRuby&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;Poor documentation&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Transform, and process logs to and from anywhere &lt;/li&gt;
&lt;li&gt;Provide search and analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Inputs, Filters and Outputs (Plugins)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Input&lt;/em&gt;: Stream source&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Filter&lt;/em&gt;: Extracts what you are interested from the stream.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Output&lt;/em&gt;: Sends the extracted stuff somewhere.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Codec&lt;/em&gt;: Decode (via inputs) and Encode (via outputs) a message&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;Simplest configuration example&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }
output { stdout {} }
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; ./logstash agent -f my.conf
&gt; 1
2014-08-26T02:42:21.416+0000 joelcorrea.local 1
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Using codecs&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
input { stdin {} }

output {
  stdout { codec =&gt; json }
}
&lt;/pre&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; 1
{&quot;message&quot;:&quot;1&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:44:29.809Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;}
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Grok: A collection of pre-defined patterns &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elasticsearch/logstash/tree/master/patterns/grok-patterns&quot;&gt;Have a look on them&lt;/a&gt; (&lt;a href=&quot;https://grokdebug.herokuapp.com/&quot;&gt;You can debug it&lt;/a&gt;)
&lt;pre class=&quot;message&quot;&gt;
input {
  stdin {}
}
filter {
  grok { 
    match =&amp;gt; [ &amp;quot;message&amp;quot;, &amp;quot;name: %{WORD:custom&lt;em&gt;name}&amp;quot; ] 
  }
  mutate { lowercase =&amp;gt; [ &amp;quot;custom&lt;/em&gt;name&amp;quot; ]
}
output {
    stdout{codec =&amp;gt; json}
}
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class=&quot;message&quot;&gt;
&gt; name: Joel
{&quot;message&quot;:&quot;name: Joel&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2014-08-26T02:56:57.461Z&quot;,&quot;host&quot;:&quot;joelcorrea.local&quot;,&quot;custom_name&quot;:&quot;joel&quot;}
&lt;/pre&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://writequit.org/articles/logstash-intro.html&quot;&gt;Logstash Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;Logstash 1.4.2 Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michael.bouvy.net/blog/en/2013/11/19/collect-visualize-your-logs-logstash-elasticsearch-redis-kibana/&quot;&gt;Collect &amp;amp; visualize your logs with Logstash, Elasticsearch &amp;amp; Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Elastic Search</title>
   <link href="http://jjcorrea.github.io/2014/08/24/elastic-search/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/elastic-search</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.3.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Search, analyze in real-time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CouchBase</title>
   <link href="http://jjcorrea.github.io/2014/08/24/couch-base/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/couch-base</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;2.5.1&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;World&amp;#39;s most complete, most scalable and best performing NoSQL database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Performance&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Availability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Builtin Cache&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Auto-sharding&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Incremental Map-Reduce&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Monitoring UI&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Geographic strength&lt;/span&gt;
&lt;span class=&quot;label label-success&quot;&gt;Multiple Connectors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-warning&quot;&gt;Key-Value&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;Document based&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;label label-danger&quot;&gt;No HTTP API&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Data / NoSQL Reference</title>
   <link href="http://jjcorrea.github.io/2014/08/24/big-data-nosql/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/big-data-nosql</id>
   <content type="html">&lt;h3&gt;Challenges&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Compression&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Statistics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Storage&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analysis&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Visualization&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Transport&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Auto-sharding â A NoSQL database automatically spreads data across servers, without requiring applications to participate. Servers can be added or removed from the data layer without application downtime, with data (and I/O) automatically spread across the servers. Most NoSQL databases also support data replication, storing multiple copies of data across the cluster, and even across data centers, to ensure high availability and support disaster recovery. A properly managed NoSQL database system should never need to be taken offline, for any reason, supporting 24x365 continuous operation of applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distributed query support â âShardingâ a relational database can reduce, or eliminate in certain cases, the ability to perform complex data queries. NoSQL database systems retain their full query expressive power even when distributed across hundreds of servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrated caching â To reduce latency and increase sustained data throughput, advanced NoSQL database technologies transparently cache data in system memory. This behavior is transparent to the application developer and the operations team, compared to relational technology where a caching tier is usually a separate infrastructure tier that must be developed to, deployed on separate servers, and explicitly managed by the ops team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;References &amp;amp; Related stuff&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.edureka.co/about-big-data-and-hadoop&quot;&gt;Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Q76-fCqVjhU&quot;&gt;Spark &amp;amp; Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtojboss.com/2013/09/04/ampd-for-hadoop-alternatives/&quot;&gt;Hadoop alternatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Spark</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-spark/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-spark</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;1.0.2&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An open-source clustered data analytics framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Cluster computing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Scala, Java &amp;amp; Python API&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Analytics&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Batch processing&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Stream processing (Real time)&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Spark SQL&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;MLib&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;GraphX&lt;/span&gt; 
&lt;span class=&quot;label label-success&quot;&gt;Spark Streaming&lt;/span&gt; 
&lt;span class=&quot;label label-warning&quot;&gt;Storage = Hadoop FS&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;Shared variables&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/programming-guide.html&lt;/p&gt;

&lt;p&gt;The main spark abstraction provides RDDs (&lt;strong&gt;Resilient distributed dataset&lt;/strong&gt;) - A collection of elements &lt;strong&gt;partitioned&lt;/strong&gt; across the nodes of a cluster, which can be operated in &lt;strong&gt;parallel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;RDDs are created by starting with a file in &lt;strong&gt;Hadoop filesystem&lt;/strong&gt; (or any other &lt;em&gt;Hadoop supported filesystem&lt;/em&gt;), it is possible to persist RDD &lt;strong&gt;in memory&lt;/strong&gt;, allowing it to be reused efficiently across parallel operations. RDDs also &lt;strong&gt;recover node failures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is also the notion of &lt;strong&gt;shared variables&lt;/strong&gt;. which &lt;em&gt;can be used&lt;/em&gt; in parallel operations. Two possible types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Broadcast variables&lt;/strong&gt; - Cache a value in memory (all nodes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulators&lt;/strong&gt; - Counters, Sums, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spark-rdd.png&quot; alt=&quot;RDD&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Shell&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/sql-programming-guide.html&lt;/p&gt;

&lt;h2&gt;Spark SQL&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/sql-programming-guide.html&lt;/p&gt;

&lt;h2&gt;MLib&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/mllib-guide.html&lt;/p&gt;

&lt;h2&gt;GraphX&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/graphx-programming-guide.html&lt;/p&gt;

&lt;h2&gt;Cluster mode&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/cluster-overview.html&lt;/p&gt;

&lt;h2&gt;Spark Streaming&lt;/h2&gt;

&lt;p&gt;http://spark.apache.org/docs/latest/streaming-programming-guide.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Mesos</title>
   <link href="http://jjcorrea.github.io/2014/08/24/apache-mesos/"/>
   <updated>2014-08-24T00:00:00-03:00</updated>
   <id>http://jjcorrea.github.io/2014/08/24/apache-mesos</id>
   <content type="html">&lt;p&gt;Version checked &lt;span class=&quot;label label-default&quot;&gt;0.19&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Develop and run resource-efficient distributed systems&lt;/p&gt;

&lt;p&gt;A cluster manager that simplifies the complexity of running applications on a shared pool of servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Highlights&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;Cluster management&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Pool&lt;/span&gt;
&lt;span class=&quot;label label-primary&quot;&gt;Scalability&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Trade-off&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-warning&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;label label-danger&quot;&gt;?&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fault-tolerant replicated master using ZooKeeper&lt;/li&gt;
&lt;li&gt;Scalability to 10,000s of nodes&lt;/li&gt;
&lt;li&gt;Isolation between tasks with Linux Containers&lt;/li&gt;
&lt;li&gt;Multi-resource scheduling (memory and CPU aware)&lt;/li&gt;
&lt;li&gt;Java, Python and C++ APIs for developing new parallel applications&lt;/li&gt;
&lt;li&gt;Web UI for viewing cluster state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Who is using&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://ebay.com&quot;&gt;eBay&lt;/a&gt;, &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;, &lt;a href=&quot;http://paypal.com&quot;&gt;PayPal&lt;/a&gt;, &lt;a href=&quot;http://airbnb.com&quot;&gt;Airbnb&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Giving a try&lt;/h3&gt;

&lt;div class=&quot;message&quot;&gt;...&lt;/div&gt;
</content>
 </entry>
 

</feed>
